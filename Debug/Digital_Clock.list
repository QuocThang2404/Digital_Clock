
Digital_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800508c  0800508c  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800508c  0800508c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08005094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200000e8  0800517c  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  0800517c  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cab1  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002329  00000000  00000000  0002cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0002eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  0002fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b2  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a7c  00000000  00000000  00049cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeaa  00000000  00000000  0005b74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e65f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  000e6648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f54 	.word	0x08004f54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08004f54 	.word	0x08004f54

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	; 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	bf28      	it	cs
 8000590:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000594:	d2ed      	bcs.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__gesf2>:
 80006f0:	f04f 3cff 	mov.w	ip, #4294967295
 80006f4:	e006      	b.n	8000704 <__cmpsf2+0x4>
 80006f6:	bf00      	nop

080006f8 <__lesf2>:
 80006f8:	f04f 0c01 	mov.w	ip, #1
 80006fc:	e002      	b.n	8000704 <__cmpsf2+0x4>
 80006fe:	bf00      	nop

08000700 <__cmpsf2>:
 8000700:	f04f 0c01 	mov.w	ip, #1
 8000704:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	bf18      	it	ne
 8000716:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800071a:	d011      	beq.n	8000740 <__cmpsf2+0x40>
 800071c:	b001      	add	sp, #4
 800071e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000722:	bf18      	it	ne
 8000724:	ea90 0f01 	teqne	r0, r1
 8000728:	bf58      	it	pl
 800072a:	ebb2 0003 	subspl.w	r0, r2, r3
 800072e:	bf88      	it	hi
 8000730:	17c8      	asrhi	r0, r1, #31
 8000732:	bf38      	it	cc
 8000734:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000738:	bf18      	it	ne
 800073a:	f040 0001 	orrne.w	r0, r0, #1
 800073e:	4770      	bx	lr
 8000740:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000744:	d102      	bne.n	800074c <__cmpsf2+0x4c>
 8000746:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800074a:	d105      	bne.n	8000758 <__cmpsf2+0x58>
 800074c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000750:	d1e4      	bne.n	800071c <__cmpsf2+0x1c>
 8000752:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000756:	d0e1      	beq.n	800071c <__cmpsf2+0x1c>
 8000758:	f85d 0b04 	ldr.w	r0, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <__aeabi_cfrcmple>:
 8000760:	4684      	mov	ip, r0
 8000762:	4608      	mov	r0, r1
 8000764:	4661      	mov	r1, ip
 8000766:	e7ff      	b.n	8000768 <__aeabi_cfcmpeq>

08000768 <__aeabi_cfcmpeq>:
 8000768:	b50f      	push	{r0, r1, r2, r3, lr}
 800076a:	f7ff ffc9 	bl	8000700 <__cmpsf2>
 800076e:	2800      	cmp	r0, #0
 8000770:	bf48      	it	mi
 8000772:	f110 0f00 	cmnmi.w	r0, #0
 8000776:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000778 <__aeabi_fcmpeq>:
 8000778:	f84d ed08 	str.w	lr, [sp, #-8]!
 800077c:	f7ff fff4 	bl	8000768 <__aeabi_cfcmpeq>
 8000780:	bf0c      	ite	eq
 8000782:	2001      	moveq	r0, #1
 8000784:	2000      	movne	r0, #0
 8000786:	f85d fb08 	ldr.w	pc, [sp], #8
 800078a:	bf00      	nop

0800078c <__aeabi_fcmplt>:
 800078c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000790:	f7ff ffea 	bl	8000768 <__aeabi_cfcmpeq>
 8000794:	bf34      	ite	cc
 8000796:	2001      	movcc	r0, #1
 8000798:	2000      	movcs	r0, #0
 800079a:	f85d fb08 	ldr.w	pc, [sp], #8
 800079e:	bf00      	nop

080007a0 <__aeabi_fcmple>:
 80007a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a4:	f7ff ffe0 	bl	8000768 <__aeabi_cfcmpeq>
 80007a8:	bf94      	ite	ls
 80007aa:	2001      	movls	r0, #1
 80007ac:	2000      	movhi	r0, #0
 80007ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b2:	bf00      	nop

080007b4 <__aeabi_fcmpge>:
 80007b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b8:	f7ff ffd2 	bl	8000760 <__aeabi_cfrcmple>
 80007bc:	bf94      	ite	ls
 80007be:	2001      	movls	r0, #1
 80007c0:	2000      	movhi	r0, #0
 80007c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c6:	bf00      	nop

080007c8 <__aeabi_fcmpgt>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff ffc8 	bl	8000760 <__aeabi_cfrcmple>
 80007d0:	bf34      	ite	cc
 80007d2:	2001      	movcc	r0, #1
 80007d4:	2000      	movcs	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <Set_hour_1>:
char buff_hour[2];
extern char buffer_time[9];


void Set_hour_1(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    HAL_Delay(150);
 80007e0:	2096      	movs	r0, #150	; 0x96
 80007e2:	f001 fda1 	bl	8002328 <HAL_Delay>
	Lcd_put_cur(4, 0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	2004      	movs	r0, #4
 80007ea:	f000 fc5f 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("00:00:00");
 80007ee:	4821      	ldr	r0, [pc, #132]	; (8000874 <Set_hour_1+0x98>)
 80007f0:	f000 fc20 	bl	8001034 <Lcd_write_string>
	while(is == 3 && button_count == 1)
 80007f4:	e032      	b.n	800085c <Set_hour_1+0x80>
	{
	  Button();
 80007f6:	f001 f91b 	bl	8001a30 <Button>
	  Rotary_Hour();
 80007fa:	f001 f9e7 	bl	8001bcc <Rotary_Hour>
	  sprintf(buff_hour, "%d", hour);
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <Set_hour_1+0x9c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	491d      	ldr	r1, [pc, #116]	; (800087c <Set_hour_1+0xa0>)
 8000806:	481e      	ldr	r0, [pc, #120]	; (8000880 <Set_hour_1+0xa4>)
 8000808:	f003 ff2a 	bl	8004660 <siprintf>
	  Lcd_put_cur(5, 0);
 800080c:	2100      	movs	r1, #0
 800080e:	2005      	movs	r0, #5
 8000810:	f000 fc4c 	bl	80010ac <Lcd_put_cur>
	  Lcd_write_string(buff_hour);
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <Set_hour_1+0xa4>)
 8000816:	f000 fc0d 	bl	8001034 <Lcd_write_string>
	  if(hour >9)
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <Set_hour_1+0x9c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b09      	cmp	r3, #9
 8000820:	dd11      	ble.n	8000846 <Set_hour_1+0x6a>
	  {
		  lcd_clear_xy(6, 0);
 8000822:	2100      	movs	r1, #0
 8000824:	2006      	movs	r0, #6
 8000826:	f000 fc29 	bl	800107c <lcd_clear_xy>
		  Lcd_put_cur(6, 0);
 800082a:	2100      	movs	r1, #0
 800082c:	2006      	movs	r0, #6
 800082e:	f000 fc3d 	bl	80010ac <Lcd_put_cur>
		  Lcd_write_string(":");
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <Set_hour_1+0xa8>)
 8000834:	f000 fbfe 	bl	8001034 <Lcd_write_string>
		  hour_count = 1;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <Set_hour_1+0xac>)
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
		  is = 7;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <Set_hour_1+0xb0>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
		  break;
 8000844:	e013      	b.n	800086e <Set_hour_1+0x92>
	  }
	  if(button_count == 0)
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <Set_hour_1+0xb4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d106      	bne.n	800085c <Set_hour_1+0x80>
	  {
		  is = 6;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <Set_hour_1+0xb0>)
 8000850:	2206      	movs	r2, #6
 8000852:	601a      	str	r2, [r3, #0]
		  button_count = 1;// min
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <Set_hour_1+0xb4>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
		  break;
 800085a:	e008      	b.n	800086e <Set_hour_1+0x92>
	while(is == 3 && button_count == 1)
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <Set_hour_1+0xb0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b03      	cmp	r3, #3
 8000862:	d104      	bne.n	800086e <Set_hour_1+0x92>
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <Set_hour_1+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d0c4      	beq.n	80007f6 <Set_hour_1+0x1a>
	  }
	}
}
 800086c:	e7ff      	b.n	800086e <Set_hour_1+0x92>
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08004f6c 	.word	0x08004f6c
 8000878:	20000154 	.word	0x20000154
 800087c:	08004f78 	.word	0x08004f78
 8000880:	20000108 	.word	0x20000108
 8000884:	08004f7c 	.word	0x08004f7c
 8000888:	20000120 	.word	0x20000120
 800088c:	20000128 	.word	0x20000128
 8000890:	20000070 	.word	0x20000070

08000894 <Set_hour_2>:
void Set_hour_2(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	while(is == 7 && button_count == 1)
 8000898:	e01d      	b.n	80008d6 <Set_hour_2+0x42>
	  {
		  Button();
 800089a:	f001 f8c9 	bl	8001a30 <Button>
		  Rotary_Hour();
 800089e:	f001 f995 	bl	8001bcc <Rotary_Hour>
		  sprintf(buff_hour, "%d", hour);
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <Set_hour_2+0x58>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <Set_hour_2+0x5c>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <Set_hour_2+0x60>)
 80008ac:	f003 fed8 	bl	8004660 <siprintf>
		  Lcd_put_cur(4, 0);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2004      	movs	r0, #4
 80008b4:	f000 fbfa 	bl	80010ac <Lcd_put_cur>
		  Lcd_write_string(buff_hour);
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <Set_hour_2+0x60>)
 80008ba:	f000 fbbb 	bl	8001034 <Lcd_write_string>
		  if(button_count == 0)
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <Set_hour_2+0x64>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d107      	bne.n	80008d6 <Set_hour_2+0x42>
		  {
			  is = 6;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <Set_hour_2+0x68>)
 80008c8:	2206      	movs	r2, #6
 80008ca:	601a      	str	r2, [r3, #0]
			  button_count = 1;// min
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <Set_hour_2+0x64>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
			  break;
 80008d2:	bf00      	nop
		  }
	  }
}
 80008d4:	e007      	b.n	80008e6 <Set_hour_2+0x52>
	while(is == 7 && button_count == 1)
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <Set_hour_2+0x68>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d103      	bne.n	80008e6 <Set_hour_2+0x52>
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <Set_hour_2+0x64>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d0d9      	beq.n	800089a <Set_hour_2+0x6>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000154 	.word	0x20000154
 80008f0:	08004f78 	.word	0x08004f78
 80008f4:	20000108 	.word	0x20000108
 80008f8:	20000070 	.word	0x20000070
 80008fc:	20000128 	.word	0x20000128

08000900 <Set_minute_1>:

void Set_minute_1(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	while(is == 6 && button_count == 1)
 8000904:	e03a      	b.n	800097c <Set_minute_1+0x7c>
	  {
		  Button();
 8000906:	f001 f893 	bl	8001a30 <Button>
		  Rotary_Min();
 800090a:	f001 f9e7 	bl	8001cdc <Rotary_Min>
		  sprintf(buff_min, "%d", min);
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <Set_minute_1+0x94>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4920      	ldr	r1, [pc, #128]	; (8000998 <Set_minute_1+0x98>)
 8000916:	4821      	ldr	r0, [pc, #132]	; (800099c <Set_minute_1+0x9c>)
 8000918:	f003 fea2 	bl	8004660 <siprintf>
		  Lcd_put_cur(8, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2008      	movs	r0, #8
 8000920:	f000 fbc4 	bl	80010ac <Lcd_put_cur>
		  Lcd_write_string(buff_min);
 8000924:	481d      	ldr	r0, [pc, #116]	; (800099c <Set_minute_1+0x9c>)
 8000926:	f000 fb85 	bl	8001034 <Lcd_write_string>
		  if(button_count == 0)
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <Set_minute_1+0xa0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10e      	bne.n	8000950 <Set_minute_1+0x50>
		  	{
		  		Lcd_put_cur(6, 1);
 8000932:	2101      	movs	r1, #1
 8000934:	2006      	movs	r0, #6
 8000936:	f000 fbb9 	bl	80010ac <Lcd_put_cur>
		  		Lcd_write_string("DONE");
 800093a:	481a      	ldr	r0, [pc, #104]	; (80009a4 <Set_minute_1+0xa4>)
 800093c:	f000 fb7a 	bl	8001034 <Lcd_write_string>
		  		HAL_Delay(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000944:	f001 fcf0 	bl	8002328 <HAL_Delay>
		  		is = 9;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <Set_minute_1+0xa8>)
 800094a:	2209      	movs	r2, #9
 800094c:	601a      	str	r2, [r3, #0]
		  		break;
 800094e:	e01e      	b.n	800098e <Set_minute_1+0x8e>
		  	}
		  if(min >9)
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <Set_minute_1+0x94>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b09      	cmp	r3, #9
 8000956:	dd11      	ble.n	800097c <Set_minute_1+0x7c>
		  {
			  lcd_clear_xy(9, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	2009      	movs	r0, #9
 800095c:	f000 fb8e 	bl	800107c <lcd_clear_xy>
			  Lcd_put_cur(9, 0);
 8000960:	2100      	movs	r1, #0
 8000962:	2009      	movs	r0, #9
 8000964:	f000 fba2 	bl	80010ac <Lcd_put_cur>
			  Lcd_write_string(":");
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <Set_minute_1+0xac>)
 800096a:	f000 fb63 	bl	8001034 <Lcd_write_string>
			  min_count = 1;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <Set_minute_1+0xb0>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
			  is = 8;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <Set_minute_1+0xa8>)
 8000976:	2208      	movs	r2, #8
 8000978:	601a      	str	r2, [r3, #0]
			  break;
 800097a:	e008      	b.n	800098e <Set_minute_1+0x8e>
	while(is == 6 && button_count == 1)
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <Set_minute_1+0xa8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b06      	cmp	r3, #6
 8000982:	d104      	bne.n	800098e <Set_minute_1+0x8e>
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <Set_minute_1+0xa0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d0bc      	beq.n	8000906 <Set_minute_1+0x6>
		  }
	  }
}
 800098c:	e7ff      	b.n	800098e <Set_minute_1+0x8e>
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000158 	.word	0x20000158
 8000998:	08004f78 	.word	0x08004f78
 800099c:	20000104 	.word	0x20000104
 80009a0:	20000070 	.word	0x20000070
 80009a4:	08004f80 	.word	0x08004f80
 80009a8:	20000128 	.word	0x20000128
 80009ac:	08004f7c 	.word	0x08004f7c
 80009b0:	20000124 	.word	0x20000124

080009b4 <Set_minute_2>:
void Set_minute_2(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	while(is == 8 && button_count == 1)
 80009b8:	e025      	b.n	8000a06 <Set_minute_2+0x52>
	  {
		  Button();
 80009ba:	f001 f839 	bl	8001a30 <Button>
		  Rotary_Min();
 80009be:	f001 f98d 	bl	8001cdc <Rotary_Min>
		  sprintf(buff_min, "%d", min);
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <Set_minute_2+0x68>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4915      	ldr	r1, [pc, #84]	; (8000a20 <Set_minute_2+0x6c>)
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <Set_minute_2+0x70>)
 80009cc:	f003 fe48 	bl	8004660 <siprintf>
		  Lcd_put_cur(7, 0);
 80009d0:	2100      	movs	r1, #0
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fb6a 	bl	80010ac <Lcd_put_cur>
		  Lcd_write_string(buff_min);
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <Set_minute_2+0x70>)
 80009da:	f000 fb2b 	bl	8001034 <Lcd_write_string>
		  if(button_count == 0)
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <Set_minute_2+0x74>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10f      	bne.n	8000a06 <Set_minute_2+0x52>
		  {
			  Lcd_put_cur(6, 1);
 80009e6:	2101      	movs	r1, #1
 80009e8:	2006      	movs	r0, #6
 80009ea:	f000 fb5f 	bl	80010ac <Lcd_put_cur>
			  Lcd_write_string("DONE");
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <Set_minute_2+0x78>)
 80009f0:	f000 fb20 	bl	8001034 <Lcd_write_string>
			  HAL_Delay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f001 fc96 	bl	8002328 <HAL_Delay>
			  is = 9;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <Set_minute_2+0x7c>)
 80009fe:	2209      	movs	r2, #9
 8000a00:	601a      	str	r2, [r3, #0]
			  break;
 8000a02:	bf00      	nop
		  }
	  }
}
 8000a04:	e007      	b.n	8000a16 <Set_minute_2+0x62>
	while(is == 8 && button_count == 1)
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <Set_minute_2+0x7c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	d103      	bne.n	8000a16 <Set_minute_2+0x62>
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <Set_minute_2+0x74>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d0d1      	beq.n	80009ba <Set_minute_2+0x6>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000158 	.word	0x20000158
 8000a20:	08004f78 	.word	0x08004f78
 8000a24:	20000104 	.word	0x20000104
 8000a28:	20000070 	.word	0x20000070
 8000a2c:	08004f80 	.word	0x08004f80
 8000a30:	20000128 	.word	0x20000128

08000a34 <Check_alarm>:
void Check_alarm(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
		RTC_Get_time();
 8000a38:	f000 ff24 	bl	8001884 <RTC_Get_time>
		while(buff_hour[0] == buffer_time[0] && buff_hour[1] == buffer_time[1] && buff_min[0] == buffer_time[3] && buff_min[1] == buffer_time[4])
 8000a3c:	e00e      	b.n	8000a5c <Check_alarm+0x28>
		{
			RTC_Get_time();
 8000a3e:	f000 ff21 	bl	8001884 <RTC_Get_time>
			HAL_Delay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f001 fc6f 	bl	8002328 <HAL_Delay>
			Lcd_clear();
 8000a4a:	f000 fb10 	bl	800106e <Lcd_clear>
			Lcd_put_cur(0, 0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fb2b 	bl	80010ac <Lcd_put_cur>
			Lcd_write_string("****************");
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <Check_alarm+0x70>)
 8000a58:	f000 faec 	bl	8001034 <Lcd_write_string>
		while(buff_hour[0] == buffer_time[0] && buff_hour[1] == buffer_time[1] && buff_min[0] == buffer_time[3] && buff_min[1] == buffer_time[4])
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <Check_alarm+0x74>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <Check_alarm+0x78>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d111      	bne.n	8000a8c <Check_alarm+0x58>
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <Check_alarm+0x74>)
 8000a6a:	785a      	ldrb	r2, [r3, #1]
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <Check_alarm+0x78>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d10b      	bne.n	8000a8c <Check_alarm+0x58>
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <Check_alarm+0x7c>)
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <Check_alarm+0x78>)
 8000a7a:	78db      	ldrb	r3, [r3, #3]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d105      	bne.n	8000a8c <Check_alarm+0x58>
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <Check_alarm+0x7c>)
 8000a82:	785a      	ldrb	r2, [r3, #1]
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <Check_alarm+0x78>)
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d0d8      	beq.n	8000a3e <Check_alarm+0xa>
		}
		Lcd_clear();
 8000a8c:	f000 faef 	bl	800106e <Lcd_clear>
		Main_menu();
 8000a90:	f000 fcda 	bl	8001448 <Main_menu>
		is = 0;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <Check_alarm+0x80>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
		scroll = 0;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <Check_alarm+0x84>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08004f88 	.word	0x08004f88
 8000aa8:	20000108 	.word	0x20000108
 8000aac:	20000134 	.word	0x20000134
 8000ab0:	20000104 	.word	0x20000104
 8000ab4:	20000128 	.word	0x20000128
 8000ab8:	20000150 	.word	0x20000150

08000abc <See_alarm>:

void See_alarm(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	Lcd_put_cur(6, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2006      	movs	r0, #6
 8000ac4:	f000 faf2 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string(":");
 8000ac8:	482a      	ldr	r0, [pc, #168]	; (8000b74 <See_alarm+0xb8>)
 8000aca:	f000 fab3 	bl	8001034 <Lcd_write_string>
	Lcd_put_cur(9, 0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2009      	movs	r0, #9
 8000ad2:	f000 faeb 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string(":00");
 8000ad6:	4828      	ldr	r0, [pc, #160]	; (8000b78 <See_alarm+0xbc>)
 8000ad8:	f000 faac 	bl	8001034 <Lcd_write_string>
	if(hour > 9)
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <See_alarm+0xc0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b09      	cmp	r3, #9
 8000ae2:	dd0b      	ble.n	8000afc <See_alarm+0x40>
	{
		lcd_clear_xy(4, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f000 fac8 	bl	800107c <lcd_clear_xy>
		Lcd_put_cur(4, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 fadc 	bl	80010ac <Lcd_put_cur>
		Lcd_write_string(buff_hour);
 8000af4:	4822      	ldr	r0, [pc, #136]	; (8000b80 <See_alarm+0xc4>)
 8000af6:	f000 fa9d 	bl	8001034 <Lcd_write_string>
 8000afa:	e00d      	b.n	8000b18 <See_alarm+0x5c>
	}
	else
	{
		Lcd_put_cur(4, 0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2004      	movs	r0, #4
 8000b00:	f000 fad4 	bl	80010ac <Lcd_put_cur>
		Lcd_write_string("0");
 8000b04:	481f      	ldr	r0, [pc, #124]	; (8000b84 <See_alarm+0xc8>)
 8000b06:	f000 fa95 	bl	8001034 <Lcd_write_string>
		Lcd_put_cur(5, 0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f000 facd 	bl	80010ac <Lcd_put_cur>
		Lcd_write_string(buff_hour);
 8000b12:	481b      	ldr	r0, [pc, #108]	; (8000b80 <See_alarm+0xc4>)
 8000b14:	f000 fa8e 	bl	8001034 <Lcd_write_string>
	}
	if(min > 9)
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <See_alarm+0xcc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b09      	cmp	r3, #9
 8000b1e:	dd0b      	ble.n	8000b38 <See_alarm+0x7c>
	{
		lcd_clear_xy(7, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2007      	movs	r0, #7
 8000b24:	f000 faaa 	bl	800107c <lcd_clear_xy>
		Lcd_put_cur(7, 0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f000 fabe 	bl	80010ac <Lcd_put_cur>
		Lcd_write_string(buff_min);
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <See_alarm+0xd0>)
 8000b32:	f000 fa7f 	bl	8001034 <Lcd_write_string>
 8000b36:	e00d      	b.n	8000b54 <See_alarm+0x98>
	}
	else
	{
		Lcd_put_cur(7, 0);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f000 fab6 	bl	80010ac <Lcd_put_cur>
		Lcd_write_string("0");
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <See_alarm+0xc8>)
 8000b42:	f000 fa77 	bl	8001034 <Lcd_write_string>
		Lcd_put_cur(8, 0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f000 faaf 	bl	80010ac <Lcd_put_cur>
		Lcd_write_string(buff_min);
 8000b4e:	480f      	ldr	r0, [pc, #60]	; (8000b8c <See_alarm+0xd0>)
 8000b50:	f000 fa70 	bl	8001034 <Lcd_write_string>
	}
	HAL_Delay(100);
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	f001 fbe7 	bl	8002328 <HAL_Delay>
	if(button_count == 0)
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <See_alarm+0xd4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d106      	bne.n	8000b70 <See_alarm+0xb4>
	{
		Lcd_clear();
 8000b62:	f000 fa84 	bl	800106e <Lcd_clear>
		is = 0;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <See_alarm+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
		Main_menu();
 8000b6c:	f000 fc6c 	bl	8001448 <Main_menu>
	}
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08004f7c 	.word	0x08004f7c
 8000b78:	08004f9c 	.word	0x08004f9c
 8000b7c:	20000154 	.word	0x20000154
 8000b80:	20000108 	.word	0x20000108
 8000b84:	08004fa0 	.word	0x08004fa0
 8000b88:	20000158 	.word	0x20000158
 8000b8c:	20000104 	.word	0x20000104
 8000b90:	20000070 	.word	0x20000070
 8000b94:	20000128 	.word	0x20000128

08000b98 <Display_Humidity>:
float humidity = 0;
uint8_t Presence = 0;

//-------------------------------------------------------------------
void Display_Humidity(float humidity)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
	char str[20];
	Lcd_put_cur(0, 1);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 fa82 	bl	80010ac <Lcd_put_cur>
	sprintf(str, " RH: %.0f%s", humidity, "%");
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fc3b 	bl	8000424 <__aeabi_f2d>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	f107 000c 	add.w	r0, r7, #12
 8000bb6:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <Display_Humidity+0x3c>)
 8000bb8:	9100      	str	r1, [sp, #0]
 8000bba:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <Display_Humidity+0x40>)
 8000bbc:	f003 fd50 	bl	8004660 <siprintf>
	Lcd_write_string(str);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fa35 	bl	8001034 <Lcd_write_string>
}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08004fb0 	.word	0x08004fb0
 8000bd8:	08004fa4 	.word	0x08004fa4

08000bdc <Display_Temperature>:

void Display_Temperature(float temperature)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	Print_Temp_C();
 8000be4:	f000 fb78 	bl	80012d8 <Print_Temp_C>
	char str[20];
	Lcd_put_cur(0, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 fa5e 	bl	80010ac <Lcd_put_cur>
	sprintf(str, " TEMP: %.f", temperature);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fc17 	bl	8000424 <__aeabi_f2d>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	f107 000c 	add.w	r0, r7, #12
 8000bfe:	4909      	ldr	r1, [pc, #36]	; (8000c24 <Display_Temperature+0x48>)
 8000c00:	f003 fd2e 	bl	8004660 <siprintf>
	Lcd_write_string(str);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fa13 	bl	8001034 <Lcd_write_string>
	Lcd_put_cur(10, 0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	200a      	movs	r0, #10
 8000c12:	f000 fa4b 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("C");
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <Display_Temperature+0x4c>)
 8000c18:	f000 fa0c 	bl	8001034 <Lcd_write_string>
}
 8000c1c:	bf00      	nop
 8000c1e:	3720      	adds	r7, #32
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08004fb4 	.word	0x08004fb4
 8000c28:	08004fc0 	.word	0x08004fc0

08000c2c <Set_pin_input>:

void Set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f001 fc6b 	bl	8002538 <HAL_GPIO_Init>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <Set_pin_output>:

void Set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f001 fc4c 	bl	8002538 <HAL_GPIO_Init>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <MCU_Signal>:

void MCU_Signal(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	Set_pin_output(DHT11_GPIO_Port, DHT11_Pin);
 8000cac:	2101      	movs	r1, #1
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MCU_Signal+0x38>)
 8000cb0:	f7ff ffdb 	bl	8000c6a <Set_pin_output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0); // pull down
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <MCU_Signal+0x38>)
 8000cba:	f001 fdd8 	bl	800286e <HAL_GPIO_WritePin>
	delay_ms(18);
 8000cbe:	2012      	movs	r0, #18
 8000cc0:	f000 f906 	bl	8000ed0 <delay_ms>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1); // pull up
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MCU_Signal+0x38>)
 8000cca:	f001 fdd0 	bl	800286e <HAL_GPIO_WritePin>
	delay_us(20);
 8000cce:	2014      	movs	r0, #20
 8000cd0:	f000 f8e2 	bl	8000e98 <delay_us>
	Set_pin_input(DHT11_GPIO_Port, DHT11_Pin);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <MCU_Signal+0x38>)
 8000cd8:	f7ff ffa8 	bl	8000c2c <Set_pin_input>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <Check_reponse>:

uint8_t Check_reponse(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
	uint8_t Reponse;
	delay_us(40);
 8000cea:	2028      	movs	r0, #40	; 0x28
 8000cec:	f000 f8d4 	bl	8000e98 <delay_us>
	if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <Check_reponse+0x54>)
 8000cf4:	f001 fda4 	bl	8002840 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10e      	bne.n	8000d1c <Check_reponse+0x38>
	{
		delay_us(80);
 8000cfe:	2050      	movs	r0, #80	; 0x50
 8000d00:	f000 f8ca 	bl	8000e98 <delay_us>
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1)
 8000d04:	2101      	movs	r1, #1
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <Check_reponse+0x54>)
 8000d08:	f001 fd9a 	bl	8002840 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d102      	bne.n	8000d18 <Check_reponse+0x34>
		{
			Reponse = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	e001      	b.n	8000d1c <Check_reponse+0x38>
		}else Reponse = -1;
 8000d18:	23ff      	movs	r3, #255	; 0xff
 8000d1a:	71fb      	strb	r3, [r7, #7]
	}
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1);
 8000d1c:	bf00      	nop
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <Check_reponse+0x54>)
 8000d22:	f001 fd8d 	bl	8002840 <HAL_GPIO_ReadPin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d0f8      	beq.n	8000d1e <Check_reponse+0x3a>

	return Reponse;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40010800 	.word	0x40010800

08000d3c <Check_bit>:

uint8_t Check_bit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0; j< 8; j++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
 8000d46:	e027      	b.n	8000d98 <Check_bit+0x5c>
	{
			while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)==0);// wait pin go up (50us)
 8000d48:	bf00      	nop
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4816      	ldr	r0, [pc, #88]	; (8000da8 <Check_bit+0x6c>)
 8000d4e:	f001 fd77 	bl	8002840 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f8      	beq.n	8000d4a <Check_bit+0xe>
			delay_us(40);
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	f000 f89d 	bl	8000e98 <delay_us>
			if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)==0) // if pin go down -> bit 0
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <Check_bit+0x6c>)
 8000d62:	f001 fd6d 	bl	8002840 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d103      	bne.n	8000d74 <Check_bit+0x38>
			{
				i = i<<1; // bit 0
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	e006      	b.n	8000d82 <Check_bit+0x46>
			}
			else
			{
				i = (i<<1) | 0x01; // bit 1
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	71fb      	strb	r3, [r7, #7]
			}
			while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)==1); // wait pin go down to transmit next bit data
 8000d82:	bf00      	nop
 8000d84:	2101      	movs	r1, #1
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <Check_bit+0x6c>)
 8000d88:	f001 fd5a 	bl	8002840 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d0f8      	beq.n	8000d84 <Check_bit+0x48>
	for(j=0; j< 8; j++)
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	3301      	adds	r3, #1
 8000d96:	71bb      	strb	r3, [r7, #6]
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	2b07      	cmp	r3, #7
 8000d9c:	d9d4      	bls.n	8000d48 <Check_bit+0xc>
	}
	return i;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010800 	.word	0x40010800

08000dac <Get_data_DHT11>:
void Get_data_DHT11(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	  Display_Temperature(temperature);
 8000db0:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <Get_data_DHT11+0xc0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff11 	bl	8000bdc <Display_Temperature>
	  Display_Humidity(humidity);
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <Get_data_DHT11+0xc4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff feea 	bl	8000b98 <Display_Humidity>

	  MCU_Signal();
 8000dc4:	f7ff ff70 	bl	8000ca8 <MCU_Signal>
	  Presence = Check_reponse();
 8000dc8:	f7ff ff8c 	bl	8000ce4 <Check_reponse>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <Get_data_DHT11+0xc8>)
 8000dd2:	701a      	strb	r2, [r3, #0]
	  RH_data = Check_bit();
 8000dd4:	f7ff ffb2 	bl	8000d3c <Check_bit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <Get_data_DHT11+0xcc>)
 8000dde:	701a      	strb	r2, [r3, #0]
	  RH_decimal = Check_bit();
 8000de0:	f7ff ffac 	bl	8000d3c <Check_bit>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <Get_data_DHT11+0xd0>)
 8000dea:	701a      	strb	r2, [r3, #0]
	  T_data = Check_bit();
 8000dec:	f7ff ffa6 	bl	8000d3c <Check_bit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <Get_data_DHT11+0xd4>)
 8000df6:	701a      	strb	r2, [r3, #0]
	  T_decimal = Check_bit();
 8000df8:	f7ff ffa0 	bl	8000d3c <Check_bit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <Get_data_DHT11+0xd8>)
 8000e02:	701a      	strb	r2, [r3, #0]
	  Check_sum = Check_bit();
 8000e04:	f7ff ff9a 	bl	8000d3c <Check_bit>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <Get_data_DHT11+0xdc>)
 8000e0e:	701a      	strb	r2, [r3, #0]

	  TEMP = T_data;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <Get_data_DHT11+0xd4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <Get_data_DHT11+0xe0>)
 8000e18:	801a      	strh	r2, [r3, #0]
	  RH = RH_data;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <Get_data_DHT11+0xcc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <Get_data_DHT11+0xe4>)
 8000e22:	801a      	strh	r2, [r3, #0]

	  temperature = (float) TEMP;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <Get_data_DHT11+0xe0>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc09 	bl	8000640 <__aeabi_ui2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <Get_data_DHT11+0xc0>)
 8000e32:	6013      	str	r3, [r2, #0]
	  humidity = (float) RH;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <Get_data_DHT11+0xe4>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fc01 	bl	8000640 <__aeabi_ui2f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <Get_data_DHT11+0xc4>)
 8000e42:	6013      	str	r3, [r2, #0]
	  if(humidity > 70)
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <Get_data_DHT11+0xc4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4912      	ldr	r1, [pc, #72]	; (8000e94 <Get_data_DHT11+0xe8>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcbc 	bl	80007c8 <__aeabi_fcmpgt>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <Get_data_DHT11+0xb0>
	  {
		  Print_Cloud();
 8000e56:	f000 fa95 	bl	8001384 <Print_Cloud>
 8000e5a:	e001      	b.n	8000e60 <Get_data_DHT11+0xb4>
	  }
	  else
	  {
		  Print_Sun();
 8000e5c:	f000 fa4c 	bl	80012f8 <Print_Sun>
	  }

	  HAL_Delay(100);
 8000e60:	2064      	movs	r0, #100	; 0x64
 8000e62:	f001 fa61 	bl	8002328 <HAL_Delay>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000114 	.word	0x20000114
 8000e70:	20000118 	.word	0x20000118
 8000e74:	2000011c 	.word	0x2000011c
 8000e78:	2000010a 	.word	0x2000010a
 8000e7c:	2000010b 	.word	0x2000010b
 8000e80:	2000010c 	.word	0x2000010c
 8000e84:	2000010d 	.word	0x2000010d
 8000e88:	2000010e 	.word	0x2000010e
 8000e8c:	20000112 	.word	0x20000112
 8000e90:	20000110 	.word	0x20000110
 8000e94:	428c0000 	.word	0x428c0000

08000e98 <delay_us>:

extern TIM_HandleTypeDef htim2;

//-------------------------------------------------------------------
void delay_us(uint16_t us)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
	htim2.Instance->CNT =0;
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <delay_us+0x34>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <delay_us+0x34>)
 8000eac:	f003 f91c 	bl	80040e8 <HAL_TIM_Base_Start>
	while(htim2.Instance->CNT < us);
 8000eb0:	bf00      	nop
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <delay_us+0x34>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3f9      	bcc.n	8000eb2 <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim2);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <delay_us+0x34>)
 8000ec0:	f003 f95c 	bl	800417c <HAL_TIM_Base_Stop>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200001b8 	.word	0x200001b8

08000ed0 <delay_ms>:

void delay_ms(uint16_t ms)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i =0 ; i<ms; i++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	81fb      	strh	r3, [r7, #14]
 8000ede:	e006      	b.n	8000eee <delay_ms+0x1e>
	{
		delay_us(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f7ff ffd8 	bl	8000e98 <delay_us>
	for(uint16_t i =0 ; i<ms; i++)
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	3301      	adds	r3, #1
 8000eec:	81fb      	strh	r3, [r7, #14]
 8000eee:	89fa      	ldrh	r2, [r7, #14]
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3f4      	bcc.n	8000ee0 <delay_ms+0x10>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <lcd_write>:
static    void    lcd_write( uint8_t Data);


//-----------------------------------------------IMPORTANT_CODE----------------------------------------------------
void lcd_write( uint8_t Data)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,Data & 0x01);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f18:	481c      	ldr	r0, [pc, #112]	; (8000f8c <lcd_write+0x8c>)
 8000f1a:	f001 fca8 	bl	800286e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port,D5_Pin,(Data>>1) & 0x01);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <lcd_write+0x8c>)
 8000f32:	f001 fc9c 	bl	800286e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,(Data>>2) & 0x01);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <lcd_write+0x8c>)
 8000f4a:	f001 fc90 	bl	800286e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port,D7_Pin,(Data>>3) & 0x01);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <lcd_write+0x8c>)
 8000f62:	f001 fc84 	bl	800286e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <lcd_write+0x90>)
 8000f6e:	f001 fc7e 	bl	800286e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f001 f9d8 	bl	8002328 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// lcd_enable
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <lcd_write+0x90>)
 8000f80:	f001 fc75 	bl	800286e <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00

08000f94 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <lcd_write_command+0x34>)
 8000fa6:	f001 fc62 	bl	800286e <HAL_GPIO_WritePin>

	lcd_write(command>>4);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffa5 	bl	8000f00 <lcd_write>
	lcd_write(command);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffa1 	bl	8000f00 <lcd_write>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <lcd_write_data>:

void lcd_write_data( uint8_t data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <lcd_write_data+0x34>)
 8000fde:	f001 fc46 	bl	800286e <HAL_GPIO_WritePin>

	lcd_write(data>>4);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff89 	bl	8000f00 <lcd_write>
	lcd_write(data);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff85 	bl	8000f00 <lcd_write>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40010c00 	.word	0x40010c00

08001004 <Lcd_Init>:
//------------------------------------------------------------------------------------------------------------

//--------------------------------------------FUNCTION------------------------------------------------------------

void Lcd_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
		LCD_Configure();
 8001008:	f000 f8aa 	bl	8001160 <LCD_Configure>
		lcd_write_command(0x03);								//Di chuyển con trỏ về vị trí đầu màn hình
 800100c:	2003      	movs	r0, #3
 800100e:	f7ff ffc1 	bl	8000f94 <lcd_write_command>
		lcd_write_command(0x02);								//					//
 8001012:	2002      	movs	r0, #2
 8001014:	f7ff ffbe 	bl	8000f94 <lcd_write_command>
		lcd_write_command(Function_Set|Function_N);				// 4-bit mode <=> DL = 0
 8001018:	2028      	movs	r0, #40	; 0x28
 800101a:	f7ff ffbb 	bl	8000f94 <lcd_write_command>
	    lcd_write_command(Clear_display);						// Clear screen
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff ffb8 	bl	8000f94 <lcd_write_command>
	    lcd_write_command(Display_On_Off | Display_D);			// Lcd-on, cursor-off, no-blink
 8001024:	200c      	movs	r0, #12
 8001026:	f7ff ffb5 	bl	8000f94 <lcd_write_command>
    	lcd_write_command(Entry_mode | Entry_I_D);			    // Increment cursor
 800102a:	2006      	movs	r0, #6
 800102c:	f7ff ffb2 	bl	8000f94 <lcd_write_command>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <Lcd_write_string>:

void Lcd_write_string(char * string)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e009      	b.n	8001056 <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffbe 	bl	8000fcc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	3301      	adds	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	7bfc      	ldrb	r4, [r7, #15]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f877 	bl	800014c <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	429c      	cmp	r4, r3
 8001062:	d3ee      	bcc.n	8001042 <Lcd_write_string+0xe>
	}
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}

0800106e <Lcd_clear>:

void Lcd_clear(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
	lcd_write_command(Clear_display);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff8e 	bl	8000f94 <lcd_write_command>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <lcd_clear_xy>:

void lcd_clear_xy(uint8_t x, uint8_t y)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	Lcd_put_cur(x, y);
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f80a 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string(" ");
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <lcd_clear_xy+0x2c>)
 800109a:	f7ff ffcb 	bl	8001034 <Lcd_write_string>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	08004fc4 	.word	0x08004fc4

080010ac <Lcd_put_cur>:

void Lcd_put_cur( uint8_t x, uint8_t y)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	if( y == 0) address = (0x80 + x);
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <Lcd_put_cur+0x1e>
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	3b80      	subs	r3, #128	; 0x80
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e005      	b.n	80010d6 <Lcd_put_cur+0x2a>
	else if( y == 1) address = (0xC0 +x);
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d102      	bne.n	80010d6 <Lcd_put_cur+0x2a>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	3b40      	subs	r3, #64	; 0x40
 80010d4:	73fb      	strb	r3, [r7, #15]
	lcd_write_command(address);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5b 	bl	8000f94 <lcd_write_command>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <Lcd_creat_customchar>:

void Lcd_creat_customchar(unsigned char * Pattern, const char location)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
	lcd_write_command(0x40 + (location*8));
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	3308      	adds	r3, #8
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff49 	bl	8000f94 <lcd_write_command>
	int i = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<8; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e009      	b.n	8001120 <Lcd_creat_customchar+0x3a>
	{
		lcd_write_data(Pattern[i]);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff59 	bl	8000fcc <lcd_write_data>
	for(i = 0; i<8; i++)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b07      	cmp	r3, #7
 8001124:	ddf2      	ble.n	800110c <Lcd_creat_customchar+0x26>
	}
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <Lcd_print_customchar>:
void Lcd_print_customchar(uint8_t data, uint8_t x, uint8_t y)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	460b      	mov	r3, r1
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	4613      	mov	r3, r2
 8001140:	717b      	strb	r3, [r7, #5]
	Lcd_put_cur(x, y);
 8001142:	797a      	ldrb	r2, [r7, #5]
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffaf 	bl	80010ac <Lcd_put_cur>
	lcd_write_data(data);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff3b 	bl	8000fcc <lcd_write_data>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <LCD_Configure>:



//-----------------------------Configure---------------------------------------------
void LCD_Configure()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <LCD_Configure+0x16c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a54      	ldr	r2, [pc, #336]	; (80012cc <LCD_Configure+0x16c>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <LCD_Configure+0x16c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <LCD_Configure+0x16c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a4e      	ldr	r2, [pc, #312]	; (80012cc <LCD_Configure+0x16c>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <LCD_Configure+0x16c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <LCD_Configure+0x16c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a48      	ldr	r2, [pc, #288]	; (80012cc <LCD_Configure+0x16c>)
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <LCD_Configure+0x16c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	483e      	ldr	r0, [pc, #248]	; (80012d0 <LCD_Configure+0x170>)
 80011d6:	f001 f9af 	bl	8002538 <HAL_GPIO_Init>

		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 80011da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4837      	ldr	r0, [pc, #220]	; (80012d0 <LCD_Configure+0x170>)
 80011f4:	f001 f9a0 	bl	8002538 <HAL_GPIO_Init>


	 //Configure RW_PIN

	GPIO_InitStruct.Pin = RW_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	482f      	ldr	r0, [pc, #188]	; (80012d0 <LCD_Configure+0x170>)
 8001212:	f001 f991 	bl	8002538 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	482c      	ldr	r0, [pc, #176]	; (80012d0 <LCD_Configure+0x170>)
 800121e:	f001 fb26 	bl	800286e <HAL_GPIO_WritePin>

	//Configure RL_PIN

	GPIO_InitStruct.Pin = RL_Pin;
 8001222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001226:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RL_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4825      	ldr	r0, [pc, #148]	; (80012d0 <LCD_Configure+0x170>)
 800123c:	f001 f97c 	bl	8002538 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RL_GPIO_Port,RL_Pin,GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001246:	4822      	ldr	r0, [pc, #136]	; (80012d0 <LCD_Configure+0x170>)
 8001248:	f001 fb11 	bl	800286e <HAL_GPIO_WritePin>

	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4619      	mov	r1, r3
 8001264:	481b      	ldr	r0, [pc, #108]	; (80012d4 <LCD_Configure+0x174>)
 8001266:	f001 f967 	bl	8002538 <HAL_GPIO_Init>

	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 800126a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4814      	ldr	r0, [pc, #80]	; (80012d4 <LCD_Configure+0x174>)
 8001284:	f001 f958 	bl	8002538 <HAL_GPIO_Init>

	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LCD_Configure+0x174>)
 80012a2:	f001 f949 	bl	8002538 <HAL_GPIO_Init>

	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 80012a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <LCD_Configure+0x174>)
 80012c0:	f001 f93a 	bl	8002538 <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40010800 	.word	0x40010800

080012d8 <Print_Temp_C>:
extern int button_count;
//---------------------------------------Custom--------------------------------------
//----------------------------------------UNIT---------------------------------------
unsigned char Temp_C[] = {0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00};
void Print_Temp_C(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	Lcd_creat_customchar(Temp_C, 7);
 80012dc:	2107      	movs	r1, #7
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <Print_Temp_C+0x1c>)
 80012e0:	f7ff ff01 	bl	80010e6 <Lcd_creat_customchar>
	Lcd_print_customchar(7, 9, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2109      	movs	r1, #9
 80012e8:	2007      	movs	r0, #7
 80012ea:	f7ff ff21 	bl	8001130 <Lcd_print_customchar>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000

080012f8 <Print_Sun>:
unsigned char Sun_3[] = {0x00,0x00,0x0E,0x06,0x02,0x10,0x18,0x1C};
unsigned char Sun_4[] = {0x03,0x03,0x01,0x08,0x0C,0x0E,0x00,0x00};
unsigned char Sun_5[] = {0x1F,0x1F,0x1F,0x1F,0x0E,0x00,0x0E,0x04};
unsigned char Sun_6[] = {0x18,0x18,0x10,0x02,0x06,0x0E,0x00,0x00};
void Print_Sun(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	  //--------------SUN------------
	  Lcd_creat_customchar(Sun_1, 1);
 80012fc:	2101      	movs	r1, #1
 80012fe:	481b      	ldr	r0, [pc, #108]	; (800136c <Print_Sun+0x74>)
 8001300:	f7ff fef1 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Sun_2, 2);
 8001304:	2102      	movs	r1, #2
 8001306:	481a      	ldr	r0, [pc, #104]	; (8001370 <Print_Sun+0x78>)
 8001308:	f7ff feed 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Sun_3, 3);
 800130c:	2103      	movs	r1, #3
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <Print_Sun+0x7c>)
 8001310:	f7ff fee9 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Sun_4, 4);
 8001314:	2104      	movs	r1, #4
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <Print_Sun+0x80>)
 8001318:	f7ff fee5 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Sun_5, 5);
 800131c:	2105      	movs	r1, #5
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <Print_Sun+0x84>)
 8001320:	f7ff fee1 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Sun_6, 6);
 8001324:	2106      	movs	r1, #6
 8001326:	4816      	ldr	r0, [pc, #88]	; (8001380 <Print_Sun+0x88>)
 8001328:	f7ff fedd 	bl	80010e6 <Lcd_creat_customchar>
	  //-----------------------------
	  Lcd_print_customchar(1, 13, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	210d      	movs	r1, #13
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fefd 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(2, 14, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	210e      	movs	r1, #14
 800133a:	2002      	movs	r0, #2
 800133c:	f7ff fef8 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(3, 15, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	210f      	movs	r1, #15
 8001344:	2003      	movs	r0, #3
 8001346:	f7ff fef3 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(4, 13, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	210d      	movs	r1, #13
 800134e:	2004      	movs	r0, #4
 8001350:	f7ff feee 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(5, 14, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	210e      	movs	r1, #14
 8001358:	2005      	movs	r0, #5
 800135a:	f7ff fee9 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(6, 15, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	210f      	movs	r1, #15
 8001362:	2006      	movs	r0, #6
 8001364:	f7ff fee4 	bl	8001130 <Lcd_print_customchar>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000010 	.word	0x20000010
 8001370:	20000018 	.word	0x20000018
 8001374:	20000020 	.word	0x20000020
 8001378:	20000028 	.word	0x20000028
 800137c:	20000030 	.word	0x20000030
 8001380:	20000038 	.word	0x20000038

08001384 <Print_Cloud>:
unsigned char Cloud_3[] = {0x00,0x00,0x00,0x00,0x00,0x10,0x1E,0x1F};
unsigned char Cloud_4[] = {0x0F,0x00,0x04,0x02,0x01,0x00,0x00,0x00};
unsigned char Cloud_5[] = {0x1F,0x00,0x12,0x09,0x04,0x00,0x00,0x00};
unsigned char Cloud_6[] = {0x1E,0x00,0x08,0x04,0x12,0x00,0x00,0x00};
void Print_Cloud(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	  //--------------CLOUD------------
	  Lcd_creat_customchar(Cloud_1, 1);
 8001388:	2101      	movs	r1, #1
 800138a:	481b      	ldr	r0, [pc, #108]	; (80013f8 <Print_Cloud+0x74>)
 800138c:	f7ff feab 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Cloud_2, 2);
 8001390:	2102      	movs	r1, #2
 8001392:	481a      	ldr	r0, [pc, #104]	; (80013fc <Print_Cloud+0x78>)
 8001394:	f7ff fea7 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Cloud_3, 3);
 8001398:	2103      	movs	r1, #3
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <Print_Cloud+0x7c>)
 800139c:	f7ff fea3 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Cloud_4, 4);
 80013a0:	2104      	movs	r1, #4
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <Print_Cloud+0x80>)
 80013a4:	f7ff fe9f 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Cloud_5, 5);
 80013a8:	2105      	movs	r1, #5
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <Print_Cloud+0x84>)
 80013ac:	f7ff fe9b 	bl	80010e6 <Lcd_creat_customchar>
	  Lcd_creat_customchar(Cloud_6, 6);
 80013b0:	2106      	movs	r1, #6
 80013b2:	4816      	ldr	r0, [pc, #88]	; (800140c <Print_Cloud+0x88>)
 80013b4:	f7ff fe97 	bl	80010e6 <Lcd_creat_customchar>
	  //-------------------------------
	  Lcd_print_customchar(1, 13, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	210d      	movs	r1, #13
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff feb7 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(2, 14, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210e      	movs	r1, #14
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff feb2 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(3, 15, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	210f      	movs	r1, #15
 80013d0:	2003      	movs	r0, #3
 80013d2:	f7ff fead 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(4, 13, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	210d      	movs	r1, #13
 80013da:	2004      	movs	r0, #4
 80013dc:	f7ff fea8 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(5, 14, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	210e      	movs	r1, #14
 80013e4:	2005      	movs	r0, #5
 80013e6:	f7ff fea3 	bl	8001130 <Lcd_print_customchar>
	  Lcd_print_customchar(6, 15, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	210f      	movs	r1, #15
 80013ee:	2006      	movs	r0, #6
 80013f0:	f7ff fe9e 	bl	8001130 <Lcd_print_customchar>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000040 	.word	0x20000040
 80013fc:	20000048 	.word	0x20000048
 8001400:	20000050 	.word	0x20000050
 8001404:	20000058 	.word	0x20000058
 8001408:	20000060 	.word	0x20000060
 800140c:	20000068 	.word	0x20000068

08001410 <Main_menu_Init>:
//-----------------------------------------------------------------------------------


//---------------------------------------Function------------------------------------
void Main_menu_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	Lcd_put_cur(4, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	2004      	movs	r0, #4
 8001418:	f7ff fe48 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("WELCOME");
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <Main_menu_Init+0x30>)
 800141e:	f7ff fe09 	bl	8001034 <Lcd_write_string>
	Lcd_put_cur(2, 1);
 8001422:	2101      	movs	r1, #1
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff fe41 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("TO MY DEVICE");
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <Main_menu_Init+0x34>)
 800142c:	f7ff fe02 	bl	8001034 <Lcd_write_string>
	HAL_Delay(1000);
 8001430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001434:	f000 ff78 	bl	8002328 <HAL_Delay>
	Lcd_clear();
 8001438:	f7ff fe19 	bl	800106e <Lcd_clear>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	08004fc8 	.word	0x08004fc8
 8001444:	08004fd0 	.word	0x08004fd0

08001448 <Main_menu>:
void Main_menu(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	Lcd_creat_customchar(Arrow, 1);
 800144c:	2101      	movs	r1, #1
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <Main_menu+0x64>)
 8001450:	f7ff fe49 	bl	80010e6 <Lcd_creat_customchar>
	switch(count)
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <Main_menu+0x68>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <Main_menu+0x1a>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00a      	beq.n	8001476 <Main_menu+0x2e>
	case 1:
		Lcd_print_customchar(1, 0, 1);
		lcd_clear_xy(0, 0);
		break;
		default:
			break;
 8001460:	e013      	b.n	800148a <Main_menu+0x42>
		Lcd_print_customchar(1, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fe62 	bl	8001130 <Lcd_print_customchar>
		lcd_clear_xy(0, 1);
 800146c:	2101      	movs	r1, #1
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fe04 	bl	800107c <lcd_clear_xy>
		break;
 8001474:	e009      	b.n	800148a <Main_menu+0x42>
		Lcd_print_customchar(1, 0, 1);
 8001476:	2201      	movs	r2, #1
 8001478:	2100      	movs	r1, #0
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fe58 	bl	8001130 <Lcd_print_customchar>
		lcd_clear_xy(0, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fdfa 	bl	800107c <lcd_clear_xy>
		break;
 8001488:	bf00      	nop
	}
	Lcd_put_cur(1, 0);
 800148a:	2100      	movs	r1, #0
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff fe0d 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("TEMP/RH");
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <Main_menu+0x6c>)
 8001494:	f7ff fdce 	bl	8001034 <Lcd_write_string>
	Lcd_put_cur(1, 1);
 8001498:	2101      	movs	r1, #1
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fe06 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("TIME");
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <Main_menu+0x70>)
 80014a2:	f7ff fdc7 	bl	8001034 <Lcd_write_string>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	2000014c 	.word	0x2000014c
 80014b4:	08004fe0 	.word	0x08004fe0
 80014b8:	08004fe8 	.word	0x08004fe8

080014bc <Main_menu_2>:
//-------------------------------------ARROW-------------------------------
void Main_menu_2(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	switch(count)
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <Main_menu_2+0x74>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <Main_menu_2+0x12>
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d016      	beq.n	80014fa <Main_menu_2+0x3e>
			  Lcd_clear();
			  is = 2;
		  }
		break;
		default:
			break;
 80014cc:	e02e      	b.n	800152c <Main_menu_2+0x70>
		Lcd_print_customchar(1, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff fe2c 	bl	8001130 <Lcd_print_customchar>
		lcd_clear_xy(0, 1);
 80014d8:	2101      	movs	r1, #1
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fdce 	bl	800107c <lcd_clear_xy>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 80014e0:	2110      	movs	r1, #16
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <Main_menu_2+0x78>)
 80014e4:	f001 f9ac 	bl	8002840 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11b      	bne.n	8001526 <Main_menu_2+0x6a>
			  Lcd_clear();
 80014ee:	f7ff fdbe 	bl	800106e <Lcd_clear>
			  is= 1;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <Main_menu_2+0x7c>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
		break;
 80014f8:	e015      	b.n	8001526 <Main_menu_2+0x6a>
		Lcd_print_customchar(1, 0, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fe16 	bl	8001130 <Lcd_print_customchar>
		lcd_clear_xy(0, 0);
 8001504:	2100      	movs	r1, #0
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fdb8 	bl	800107c <lcd_clear_xy>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 800150c:	2110      	movs	r1, #16
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <Main_menu_2+0x78>)
 8001510:	f001 f996 	bl	8002840 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d107      	bne.n	800152a <Main_menu_2+0x6e>
			  Lcd_clear();
 800151a:	f7ff fda8 	bl	800106e <Lcd_clear>
			  is = 2;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <Main_menu_2+0x7c>)
 8001520:	2202      	movs	r2, #2
 8001522:	601a      	str	r2, [r3, #0]
		break;
 8001524:	e001      	b.n	800152a <Main_menu_2+0x6e>
		break;
 8001526:	bf00      	nop
 8001528:	e000      	b.n	800152c <Main_menu_2+0x70>
		break;
 800152a:	bf00      	nop
	}
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000014c 	.word	0x2000014c
 8001534:	40010c00 	.word	0x40010c00
 8001538:	20000128 	.word	0x20000128

0800153c <Main_begin_2>:
//--------------------------------------------------------------------------
void Main_begin_2(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	  while(button_count == 1 && is == 0 )
 8001540:	e003      	b.n	800154a <Main_begin_2+0xe>
	  	{
		  Rotary_encoder_Handle();
 8001542:	f000 f9e1 	bl	8001908 <Rotary_encoder_Handle>
		  Main_menu_2();
 8001546:	f7ff ffb9 	bl	80014bc <Main_menu_2>
	  while(button_count == 1 && is == 0 )
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <Main_begin_2+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d103      	bne.n	800155a <Main_begin_2+0x1e>
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <Main_begin_2+0x28>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f3      	beq.n	8001542 <Main_begin_2+0x6>
	  	}
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000070 	.word	0x20000070
 8001564:	20000128 	.word	0x20000128

08001568 <Menu_set_Time_Alarm>:


void Menu_set_Time_Alarm(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	switch(scroll)
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <Menu_set_Time_Alarm+0x74>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <Menu_set_Time_Alarm+0x12>
 8001574:	2b01      	cmp	r3, #1
 8001576:	d016      	beq.n	80015a6 <Menu_set_Time_Alarm+0x3e>
			  Lcd_clear();
			  is = 4;
		  }
		break;
		default:
			break;
 8001578:	e02e      	b.n	80015d8 <Menu_set_Time_Alarm+0x70>
		Lcd_print_customchar(1, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fdd6 	bl	8001130 <Lcd_print_customchar>
		lcd_clear_xy(0, 1);
 8001584:	2101      	movs	r1, #1
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fd78 	bl	800107c <lcd_clear_xy>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 800158c:	2110      	movs	r1, #16
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <Menu_set_Time_Alarm+0x78>)
 8001590:	f001 f956 	bl	8002840 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11b      	bne.n	80015d2 <Menu_set_Time_Alarm+0x6a>
			  Lcd_clear();
 800159a:	f7ff fd68 	bl	800106e <Lcd_clear>
			  is= 3;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <Menu_set_Time_Alarm+0x7c>)
 80015a0:	2203      	movs	r2, #3
 80015a2:	601a      	str	r2, [r3, #0]
		break;
 80015a4:	e015      	b.n	80015d2 <Menu_set_Time_Alarm+0x6a>
		Lcd_print_customchar(1, 0, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fdc0 	bl	8001130 <Lcd_print_customchar>
		lcd_clear_xy(0, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fd62 	bl	800107c <lcd_clear_xy>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 80015b8:	2110      	movs	r1, #16
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <Menu_set_Time_Alarm+0x78>)
 80015bc:	f001 f940 	bl	8002840 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <Menu_set_Time_Alarm+0x6e>
			  Lcd_clear();
 80015c6:	f7ff fd52 	bl	800106e <Lcd_clear>
			  is = 4;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <Menu_set_Time_Alarm+0x7c>)
 80015cc:	2204      	movs	r2, #4
 80015ce:	601a      	str	r2, [r3, #0]
		break;
 80015d0:	e001      	b.n	80015d6 <Menu_set_Time_Alarm+0x6e>
		break;
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <Menu_set_Time_Alarm+0x70>
		break;
 80015d6:	bf00      	nop
		}
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000150 	.word	0x20000150
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	20000128 	.word	0x20000128

080015e8 <Menu_1>:

void Menu_1(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	Lcd_put_cur(1, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fd5c 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("SET ALARM");
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <Menu_1+0x34>)
 80015f6:	f7ff fd1d 	bl	8001034 <Lcd_write_string>
	Lcd_put_cur(1, 1);
 80015fa:	2101      	movs	r1, #1
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd55 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string("SEE YOUR ALARM");
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <Menu_1+0x38>)
 8001604:	f7ff fd16 	bl	8001034 <Lcd_write_string>
	lcd_clear_xy(10, 0);
 8001608:	2100      	movs	r1, #0
 800160a:	200a      	movs	r0, #10
 800160c:	f7ff fd36 	bl	800107c <lcd_clear_xy>
	lcd_clear_xy(11, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	200b      	movs	r0, #11
 8001614:	f7ff fd32 	bl	800107c <lcd_clear_xy>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08004ff0 	.word	0x08004ff0
 8001620:	08004ffc 	.word	0x08004ffc

08001624 <Inside>:

void Inside(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	Button();
 8001628:	f000 fa02 	bl	8001a30 <Button>
	  if(is == 1 && count  == 0)
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <Inside+0x168>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d119      	bne.n	8001668 <Inside+0x44>
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <Inside+0x16c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d115      	bne.n	8001668 <Inside+0x44>
	  {
		  	  Rotary_encoder_Handle();
 800163c:	f000 f964 	bl	8001908 <Rotary_encoder_Handle>
		  	  Button();
 8001640:	f000 f9f6 	bl	8001a30 <Button>
			  Get_data_DHT11();
 8001644:	f7ff fbb2 	bl	8000dac <Get_data_DHT11>
			  if(button_count == 0)
 8001648:	4b52      	ldr	r3, [pc, #328]	; (8001794 <Inside+0x170>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 809a 	bne.w	8001786 <Inside+0x162>
			  {
				  Lcd_clear();
 8001652:	f7ff fd0c 	bl	800106e <Lcd_clear>
				  is = 0;
 8001656:	4b4d      	ldr	r3, [pc, #308]	; (800178c <Inside+0x168>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
				  count  = 0;
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <Inside+0x16c>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
				  Main_menu();
 8001662:	f7ff fef1 	bl	8001448 <Main_menu>
			  if(button_count == 0)
 8001666:	e08e      	b.n	8001786 <Inside+0x162>
			  }
	  }
	  else if(is == 2 && count == 1)
 8001668:	4b48      	ldr	r3, [pc, #288]	; (800178c <Inside+0x168>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d12d      	bne.n	80016cc <Inside+0xa8>
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <Inside+0x16c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d129      	bne.n	80016cc <Inside+0xa8>
	  {
		  while(button_count == 1 && is == 2)
 8001678:	e011      	b.n	800169e <Inside+0x7a>
		  {
			  Button();
 800167a:	f000 f9d9 	bl	8001a30 <Button>
			  RTC_Get_time();
 800167e:	f000 f901 	bl	8001884 <RTC_Get_time>
			  if(scroll == 3)
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <Inside+0x174>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d109      	bne.n	800169e <Inside+0x7a>
			  {
				is = 5;
 800168a:	4b40      	ldr	r3, [pc, #256]	; (800178c <Inside+0x168>)
 800168c:	2205      	movs	r2, #5
 800168e:	601a      	str	r2, [r3, #0]
				count = 0;
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <Inside+0x16c>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
				scroll = 0;
 8001696:	4b40      	ldr	r3, [pc, #256]	; (8001798 <Inside+0x174>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
				break;
 800169c:	e007      	b.n	80016ae <Inside+0x8a>
		  while(button_count == 1 && is == 2)
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <Inside+0x170>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d103      	bne.n	80016ae <Inside+0x8a>
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <Inside+0x168>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d0e5      	beq.n	800167a <Inside+0x56>
			  }
		  }
		  if(button_count == 0)
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <Inside+0x170>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d167      	bne.n	8001786 <Inside+0x162>
		  {
			  Lcd_clear();
 80016b6:	f7ff fcda 	bl	800106e <Lcd_clear>
			  is = 0;
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <Inside+0x168>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
			  count = 1;
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <Inside+0x16c>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
			  Main_menu();
 80016c6:	f7ff febf 	bl	8001448 <Main_menu>
		  if(button_count == 0)
 80016ca:	e05c      	b.n	8001786 <Inside+0x162>
		  }
	  }
	  else if(is == 3) // Set Alarm
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <Inside+0x168>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d102      	bne.n	80016da <Inside+0xb6>
	  {
		  Set_hour_1();
 80016d4:	f7ff f882 	bl	80007dc <Set_hour_1>
	  }
	  else
	  {
		  Main_menu();
	  }
}
 80016d8:	e055      	b.n	8001786 <Inside+0x162>
	  else if(is == 4)
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <Inside+0x168>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d102      	bne.n	80016e8 <Inside+0xc4>
		  See_alarm();
 80016e2:	f7ff f9eb 	bl	8000abc <See_alarm>
}
 80016e6:	e04e      	b.n	8001786 <Inside+0x162>
	  else if(is == 5)
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <Inside+0x168>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d11a      	bne.n	8001726 <Inside+0x102>
		  Menu_1();
 80016f0:	f7ff ff7a 	bl	80015e8 <Menu_1>
		  while(button_count == 1 && is == 5)
 80016f4:	e00e      	b.n	8001714 <Inside+0xf0>
			  Rotary_Scroll();
 80016f6:	f000 f9ef 	bl	8001ad8 <Rotary_Scroll>
			  Menu_set_Time_Alarm();
 80016fa:	f7ff ff35 	bl	8001568 <Menu_set_Time_Alarm>
			  if(button_count == 0)
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <Inside+0x170>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <Inside+0xf0>
				  Lcd_clear();
 8001706:	f7ff fcb2 	bl	800106e <Lcd_clear>
				  is = 0;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <Inside+0x168>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
				  Main_menu();
 8001710:	f7ff fe9a 	bl	8001448 <Main_menu>
		  while(button_count == 1 && is == 5)
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <Inside+0x170>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d134      	bne.n	8001786 <Inside+0x162>
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <Inside+0x168>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d0e8      	beq.n	80016f6 <Inside+0xd2>
}
 8001724:	e02f      	b.n	8001786 <Inside+0x162>
	  else if(is == 6) // MINUTE
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <Inside+0x168>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b06      	cmp	r3, #6
 800172c:	d102      	bne.n	8001734 <Inside+0x110>
		  Set_minute_1();
 800172e:	f7ff f8e7 	bl	8000900 <Set_minute_1>
}
 8001732:	e028      	b.n	8001786 <Inside+0x162>
	  else if(is == 7 && hour_count == 1)
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <Inside+0x168>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b07      	cmp	r3, #7
 800173a:	d106      	bne.n	800174a <Inside+0x126>
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <Inside+0x178>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <Inside+0x126>
		  Set_hour_2();
 8001744:	f7ff f8a6 	bl	8000894 <Set_hour_2>
 8001748:	e01d      	b.n	8001786 <Inside+0x162>
	  else if(is == 8 && min_count == 1)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <Inside+0x168>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b08      	cmp	r3, #8
 8001750:	d106      	bne.n	8001760 <Inside+0x13c>
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <Inside+0x17c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d102      	bne.n	8001760 <Inside+0x13c>
		  Set_minute_2();
 800175a:	f7ff f92b 	bl	80009b4 <Set_minute_2>
 800175e:	e012      	b.n	8001786 <Inside+0x162>
	  else if(is == 9)
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <Inside+0x168>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b09      	cmp	r3, #9
 8001766:	d10b      	bne.n	8001780 <Inside+0x15c>
		  while(button_count == 1 && is == 9)
 8001768:	e001      	b.n	800176e <Inside+0x14a>
 			  Check_alarm();
 800176a:	f7ff f963 	bl	8000a34 <Check_alarm>
		  while(button_count == 1 && is == 9)
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <Inside+0x170>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <Inside+0x162>
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <Inside+0x168>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b09      	cmp	r3, #9
 800177c:	d0f5      	beq.n	800176a <Inside+0x146>
}
 800177e:	e002      	b.n	8001786 <Inside+0x162>
		  Main_menu();
 8001780:	f7ff fe62 	bl	8001448 <Main_menu>
}
 8001784:	e7ff      	b.n	8001786 <Inside+0x162>
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000128 	.word	0x20000128
 8001790:	2000014c 	.word	0x2000014c
 8001794:	20000070 	.word	0x20000070
 8001798:	20000150 	.word	0x20000150
 800179c:	20000120 	.word	0x20000120
 80017a0:	20000124 	.word	0x20000124

080017a4 <BcdToDecimal>:
{
	return ((num / 10) << 4) | (num % 10);
}

static uint8_t BcdToDecimal(uint8_t num)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	return ((num >> 4) * 10) + (num & 0x0F);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <RTC_ReadTime>:
	buff[7] = DecimalToBcd(dt->year);
	HAL_I2C_Master_Transmit(&hi2c2, RTC_Address, buff, 8, 1000);
}

void RTC_ReadTime(Data_time *dt)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af02      	add	r7, sp, #8
 80017da:	6078      	str	r0, [r7, #4]
	uint8_t read_time[7];
	uint8_t addr_reg = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_Address, &addr_reg, 1, 1000);
 80017e0:	f107 020f 	add.w	r2, r7, #15
 80017e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	21d0      	movs	r1, #208	; 0xd0
 80017ee:	4824      	ldr	r0, [pc, #144]	; (8001880 <RTC_ReadTime+0xac>)
 80017f0:	f001 f99a 	bl	8002b28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, RTC_Address, read_time, 7, 1000);
 80017f4:	f107 0210 	add.w	r2, r7, #16
 80017f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2307      	movs	r3, #7
 8001800:	21d0      	movs	r1, #208	; 0xd0
 8001802:	481f      	ldr	r0, [pc, #124]	; (8001880 <RTC_ReadTime+0xac>)
 8001804:	f001 fa8e 	bl	8002d24 <HAL_I2C_Master_Receive>
	dt->second = BcdToDecimal(read_time[0]);
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ffca 	bl	80017a4 <BcdToDecimal>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
	dt->minute = BcdToDecimal(read_time[1]);
 8001818:	7c7b      	ldrb	r3, [r7, #17]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ffc2 	bl	80017a4 <BcdToDecimal>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	705a      	strb	r2, [r3, #1]
	dt->hour = BcdToDecimal(read_time[2]);
 8001828:	7cbb      	ldrb	r3, [r7, #18]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffba 	bl	80017a4 <BcdToDecimal>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	709a      	strb	r2, [r3, #2]
	dt->day = BcdToDecimal(read_time[3]);
 8001838:	7cfb      	ldrb	r3, [r7, #19]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffb2 	bl	80017a4 <BcdToDecimal>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	70da      	strb	r2, [r3, #3]
	dt->date = BcdToDecimal(read_time[4]);
 8001848:	7d3b      	ldrb	r3, [r7, #20]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ffaa 	bl	80017a4 <BcdToDecimal>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	711a      	strb	r2, [r3, #4]
	dt->month = BcdToDecimal(read_time[5]);
 8001858:	7d7b      	ldrb	r3, [r7, #21]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ffa2 	bl	80017a4 <BcdToDecimal>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	715a      	strb	r2, [r3, #5]
	dt->year = BcdToDecimal(read_time[6]);
 8001868:	7dbb      	ldrb	r3, [r7, #22]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff9a 	bl	80017a4 <BcdToDecimal>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	719a      	strb	r2, [r3, #6]
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000164 	.word	0x20000164

08001884 <RTC_Get_time>:
char buffer_time[9];
char buffer_day[11];
void RTC_Get_time(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af02      	add	r7, sp, #8
	RTC_ReadTime(&set_time);
 800188a:	481a      	ldr	r0, [pc, #104]	; (80018f4 <RTC_Get_time+0x70>)
 800188c:	f7ff ffa2 	bl	80017d4 <RTC_ReadTime>
	sprintf(buffer_time,"%02d:%02d:%02d", set_time.hour,set_time.minute,set_time.second);
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <RTC_Get_time+0x70>)
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	461a      	mov	r2, r3
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <RTC_Get_time+0x70>)
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	4619      	mov	r1, r3
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <RTC_Get_time+0x70>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	460b      	mov	r3, r1
 80018a4:	4914      	ldr	r1, [pc, #80]	; (80018f8 <RTC_Get_time+0x74>)
 80018a6:	4815      	ldr	r0, [pc, #84]	; (80018fc <RTC_Get_time+0x78>)
 80018a8:	f002 feda 	bl	8004660 <siprintf>
	Lcd_put_cur(4, 0);
 80018ac:	2100      	movs	r1, #0
 80018ae:	2004      	movs	r0, #4
 80018b0:	f7ff fbfc 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string(buffer_time);
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <RTC_Get_time+0x78>)
 80018b6:	f7ff fbbd 	bl	8001034 <Lcd_write_string>
	sprintf(buffer_day,"%02d-%02d-20%02d", set_time.date,set_time.month,set_time.year);
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <RTC_Get_time+0x70>)
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <RTC_Get_time+0x70>)
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <RTC_Get_time+0x70>)
 80018c8:	799b      	ldrb	r3, [r3, #6]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	490c      	ldr	r1, [pc, #48]	; (8001900 <RTC_Get_time+0x7c>)
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <RTC_Get_time+0x80>)
 80018d2:	f002 fec5 	bl	8004660 <siprintf>
	Lcd_put_cur(3, 1);
 80018d6:	2101      	movs	r1, #1
 80018d8:	2003      	movs	r0, #3
 80018da:	f7ff fbe7 	bl	80010ac <Lcd_put_cur>
	Lcd_write_string(buffer_day);
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <RTC_Get_time+0x80>)
 80018e0:	f7ff fba8 	bl	8001034 <Lcd_write_string>

	Rotary_Scroll();
 80018e4:	f000 f8f8 	bl	8001ad8 <Rotary_Scroll>
	HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f000 fd1d 	bl	8002328 <HAL_Delay>
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000012c 	.word	0x2000012c
 80018f8:	0800500c 	.word	0x0800500c
 80018fc:	20000134 	.word	0x20000134
 8001900:	0800501c 	.word	0x0800501c
 8001904:	20000140 	.word	0x20000140

08001908 <Rotary_encoder_Handle>:
uint32_t time_debounce;
uint32_t time_start_press;
uint8_t holding_press = 0;

void Rotary_encoder_Handle(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 800190c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001910:	4843      	ldr	r0, [pc, #268]	; (8001a20 <Rotary_encoder_Handle+0x118>)
 8001912:	f000 ff95 	bl	8002840 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12d      	bne.n	8001978 <Rotary_encoder_Handle+0x70>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 800191c:	2108      	movs	r1, #8
 800191e:	4841      	ldr	r0, [pc, #260]	; (8001a24 <Rotary_encoder_Handle+0x11c>)
 8001920:	f000 ff8e 	bl	8002840 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d15c      	bne.n	80019e4 <Rotary_encoder_Handle+0xdc>
		  {
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET);
 800192a:	bf00      	nop
 800192c:	2108      	movs	r1, #8
 800192e:	483d      	ldr	r0, [pc, #244]	; (8001a24 <Rotary_encoder_Handle+0x11c>)
 8001930:	f000 ff86 	bl	8002840 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d0f8      	beq.n	800192c <Rotary_encoder_Handle+0x24>
			  count++;
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 8001942:	6013      	str	r3, [r2, #0]
			  scroll++;
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a38      	ldr	r2, [pc, #224]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 800194c:	6013      	str	r3, [r2, #0]
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET); // doi pha A het muc 0, len muc 1
 800194e:	bf00      	nop
 8001950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001954:	4832      	ldr	r0, [pc, #200]	; (8001a20 <Rotary_encoder_Handle+0x118>)
 8001956:	f000 ff73 	bl	8002840 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f7      	beq.n	8001950 <Rotary_encoder_Handle+0x48>
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);//doi pha B het muc 0, len muc 1
 8001960:	bf00      	nop
 8001962:	2108      	movs	r1, #8
 8001964:	482f      	ldr	r0, [pc, #188]	; (8001a24 <Rotary_encoder_Handle+0x11c>)
 8001966:	f000 ff6b 	bl	8002840 <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f8      	beq.n	8001962 <Rotary_encoder_Handle+0x5a>
			  HAL_Delay(10);
 8001970:	200a      	movs	r0, #10
 8001972:	f000 fcd9 	bl	8002328 <HAL_Delay>
 8001976:	e035      	b.n	80019e4 <Rotary_encoder_Handle+0xdc>
		  }
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001978:	2108      	movs	r1, #8
 800197a:	482a      	ldr	r0, [pc, #168]	; (8001a24 <Rotary_encoder_Handle+0x11c>)
 800197c:	f000 ff60 	bl	8002840 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12e      	bne.n	80019e4 <Rotary_encoder_Handle+0xdc>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	4825      	ldr	r0, [pc, #148]	; (8001a20 <Rotary_encoder_Handle+0x118>)
 800198c:	f000 ff58 	bl	8002840 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d126      	bne.n	80019e4 <Rotary_encoder_Handle+0xdc>
		  {
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET );//doi pha A het muc 1, len muc 0
 8001996:	bf00      	nop
 8001998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199c:	4820      	ldr	r0, [pc, #128]	; (8001a20 <Rotary_encoder_Handle+0x118>)
 800199e:	f000 ff4f 	bl	8002840 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d0f7      	beq.n	8001998 <Rotary_encoder_Handle+0x90>
			  count--;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 80019b0:	6013      	str	r3, [r2, #0]
			  scroll--;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 80019ba:	6013      	str	r3, [r2, #0]
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);
 80019bc:	bf00      	nop
 80019be:	2108      	movs	r1, #8
 80019c0:	4818      	ldr	r0, [pc, #96]	; (8001a24 <Rotary_encoder_Handle+0x11c>)
 80019c2:	f000 ff3d 	bl	8002840 <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f8      	beq.n	80019be <Rotary_encoder_Handle+0xb6>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET);// doi pha A het muc 0, len muc 1
 80019cc:	bf00      	nop
 80019ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d2:	4813      	ldr	r0, [pc, #76]	; (8001a20 <Rotary_encoder_Handle+0x118>)
 80019d4:	f000 ff34 	bl	8002840 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f7      	beq.n	80019ce <Rotary_encoder_Handle+0xc6>
			  HAL_Delay(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f000 fca2 	bl	8002328 <HAL_Delay>
		  }
	  }
	  if(count < 0) count = 0;
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da02      	bge.n	80019f2 <Rotary_encoder_Handle+0xea>
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
	  if(count > 1) count = 1;
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	dd02      	ble.n	8001a00 <Rotary_encoder_Handle+0xf8>
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <Rotary_encoder_Handle+0x120>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
	  if(scroll < 0) scroll = 0;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da02      	bge.n	8001a0e <Rotary_encoder_Handle+0x106>
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
	  if(scroll > 3) scroll = 3;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	dd02      	ble.n	8001a1c <Rotary_encoder_Handle+0x114>
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <Rotary_encoder_Handle+0x124>)
 8001a18:	2203      	movs	r2, #3
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	2000014c 	.word	0x2000014c
 8001a2c:	20000150 	.word	0x20000150

08001a30 <Button>:
void Button(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	uint8_t sta = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001a36:	2110      	movs	r1, #16
 8001a38:	4820      	ldr	r0, [pc, #128]	; (8001abc <Button+0x8c>)
 8001a3a:	f000 ff01 	bl	8002840 <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
	if(sta != button_filter)
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <Button+0x90>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d00a      	beq.n	8001a62 <Button+0x32>
	{
		button_filter = sta;
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <Button+0x90>)
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	7013      	strb	r3, [r2, #0]
		is_debouncing = 1;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <Button+0x94>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
		time_debounce = HAL_GetTick();
 8001a58:	f000 fc5c 	bl	8002314 <HAL_GetTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <Button+0x98>)
 8001a60:	6013      	str	r3, [r2, #0]
	}
	if(is_debouncing  && HAL_GetTick() - time_debounce >= 15)
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <Button+0x94>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <Button+0x58>
 8001a6a:	f000 fc53 	bl	8002314 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <Button+0x98>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b0e      	cmp	r3, #14
 8001a78:	d906      	bls.n	8001a88 <Button+0x58>
	{
		button_current_state = button_filter;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <Button+0x90>)
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <Button+0x9c>)
 8001a80:	701a      	strb	r2, [r3, #0]
		is_debouncing = 0;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <Button+0x94>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
	}

	if(button_current_state != button_last_state)
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <Button+0x9c>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <Button+0xa0>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d00e      	beq.n	8001ab2 <Button+0x82>
	{
		if(button_current_state == 0)//nhan xuong
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <Button+0x9c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <Button+0x74>
		{
			button_count = 0;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <Button+0xa4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e002      	b.n	8001aaa <Button+0x7a>
		}
		else//nha ra
		{
			button_count = 1;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <Button+0xa4>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
		}
		button_last_state = button_current_state;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <Button+0x9c>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <Button+0xa0>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	20000076 	.word	0x20000076
 8001ac4:	2000015c 	.word	0x2000015c
 8001ac8:	20000160 	.word	0x20000160
 8001acc:	20000074 	.word	0x20000074
 8001ad0:	20000075 	.word	0x20000075
 8001ad4:	20000070 	.word	0x20000070

08001ad8 <Rotary_Scroll>:
void Rotary_Scroll(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 8001adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae0:	4837      	ldr	r0, [pc, #220]	; (8001bc0 <Rotary_Scroll+0xe8>)
 8001ae2:	f000 fead 	bl	8002840 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d128      	bne.n	8001b3e <Rotary_Scroll+0x66>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 8001aec:	2108      	movs	r1, #8
 8001aee:	4835      	ldr	r0, [pc, #212]	; (8001bc4 <Rotary_Scroll+0xec>)
 8001af0:	f000 fea6 	bl	8002840 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d152      	bne.n	8001ba0 <Rotary_Scroll+0xc8>
		  {
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET);
 8001afa:	bf00      	nop
 8001afc:	2108      	movs	r1, #8
 8001afe:	4831      	ldr	r0, [pc, #196]	; (8001bc4 <Rotary_Scroll+0xec>)
 8001b00:	f000 fe9e 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d0f8      	beq.n	8001afc <Rotary_Scroll+0x24>
			  scroll++;
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a2d      	ldr	r2, [pc, #180]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001b12:	6013      	str	r3, [r2, #0]
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET); // doi pha A het muc 0, len muc 1
 8001b14:	bf00      	nop
 8001b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1a:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <Rotary_Scroll+0xe8>)
 8001b1c:	f000 fe90 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f7      	beq.n	8001b16 <Rotary_Scroll+0x3e>
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);//doi pha B het muc 0, len muc 1
 8001b26:	bf00      	nop
 8001b28:	2108      	movs	r1, #8
 8001b2a:	4826      	ldr	r0, [pc, #152]	; (8001bc4 <Rotary_Scroll+0xec>)
 8001b2c:	f000 fe88 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f8      	beq.n	8001b28 <Rotary_Scroll+0x50>
			  HAL_Delay(10);
 8001b36:	200a      	movs	r0, #10
 8001b38:	f000 fbf6 	bl	8002328 <HAL_Delay>
 8001b3c:	e030      	b.n	8001ba0 <Rotary_Scroll+0xc8>
		  }
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001b3e:	2108      	movs	r1, #8
 8001b40:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <Rotary_Scroll+0xec>)
 8001b42:	f000 fe7d 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d129      	bne.n	8001ba0 <Rotary_Scroll+0xc8>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)
 8001b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b50:	481b      	ldr	r0, [pc, #108]	; (8001bc0 <Rotary_Scroll+0xe8>)
 8001b52:	f000 fe75 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d121      	bne.n	8001ba0 <Rotary_Scroll+0xc8>
		  {
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET );//doi pha A het muc 1, len muc 0
 8001b5c:	bf00      	nop
 8001b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b62:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <Rotary_Scroll+0xe8>)
 8001b64:	f000 fe6c 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d0f7      	beq.n	8001b5e <Rotary_Scroll+0x86>
			  scroll--;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001b76:	6013      	str	r3, [r2, #0]
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);
 8001b78:	bf00      	nop
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <Rotary_Scroll+0xec>)
 8001b7e:	f000 fe5f 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f8      	beq.n	8001b7a <Rotary_Scroll+0xa2>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET);// doi pha A het muc 0, len muc 1
 8001b88:	bf00      	nop
 8001b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b8e:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <Rotary_Scroll+0xe8>)
 8001b90:	f000 fe56 	bl	8002840 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f7      	beq.n	8001b8a <Rotary_Scroll+0xb2>
			  HAL_Delay(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f000 fbc4 	bl	8002328 <HAL_Delay>
		  }
	  }
		  if(scroll < 0) scroll = 0;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	da02      	bge.n	8001bae <Rotary_Scroll+0xd6>
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
		  if(scroll > 4) scroll = 3;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	dd02      	ble.n	8001bbc <Rotary_Scroll+0xe4>
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <Rotary_Scroll+0xf0>)
 8001bb8:	2203      	movs	r2, #3
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010800 	.word	0x40010800
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	20000150 	.word	0x20000150

08001bcc <Rotary_Hour>:
void Rotary_Hour(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 8001bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd4:	483d      	ldr	r0, [pc, #244]	; (8001ccc <Rotary_Hour+0x100>)
 8001bd6:	f000 fe33 	bl	8002840 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d128      	bne.n	8001c32 <Rotary_Hour+0x66>
		  {
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 8001be0:	2108      	movs	r1, #8
 8001be2:	483b      	ldr	r0, [pc, #236]	; (8001cd0 <Rotary_Hour+0x104>)
 8001be4:	f000 fe2c 	bl	8002840 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d152      	bne.n	8001c94 <Rotary_Hour+0xc8>
			  {
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET);
 8001bee:	bf00      	nop
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	4837      	ldr	r0, [pc, #220]	; (8001cd0 <Rotary_Hour+0x104>)
 8001bf4:	f000 fe24 	bl	8002840 <HAL_GPIO_ReadPin>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d0f8      	beq.n	8001bf0 <Rotary_Hour+0x24>
				  hour++;
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <Rotary_Hour+0x108>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <Rotary_Hour+0x108>)
 8001c06:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET); // doi pha A het muc 0, len muc 1
 8001c08:	bf00      	nop
 8001c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0e:	482f      	ldr	r0, [pc, #188]	; (8001ccc <Rotary_Hour+0x100>)
 8001c10:	f000 fe16 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f7      	beq.n	8001c0a <Rotary_Hour+0x3e>
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);//doi pha B het muc 0, len muc 1
 8001c1a:	bf00      	nop
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	482c      	ldr	r0, [pc, #176]	; (8001cd0 <Rotary_Hour+0x104>)
 8001c20:	f000 fe0e 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f8      	beq.n	8001c1c <Rotary_Hour+0x50>
				  HAL_Delay(10);
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f000 fb7c 	bl	8002328 <HAL_Delay>
 8001c30:	e030      	b.n	8001c94 <Rotary_Hour+0xc8>
			  }
		  }
		  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001c32:	2108      	movs	r1, #8
 8001c34:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <Rotary_Hour+0x104>)
 8001c36:	f000 fe03 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d129      	bne.n	8001c94 <Rotary_Hour+0xc8>
		  {
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)
 8001c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c44:	4821      	ldr	r0, [pc, #132]	; (8001ccc <Rotary_Hour+0x100>)
 8001c46:	f000 fdfb 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d121      	bne.n	8001c94 <Rotary_Hour+0xc8>
			  {
				  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET );//doi pha A het muc 1, len muc 0
 8001c50:	bf00      	nop
 8001c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c56:	481d      	ldr	r0, [pc, #116]	; (8001ccc <Rotary_Hour+0x100>)
 8001c58:	f000 fdf2 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d0f7      	beq.n	8001c52 <Rotary_Hour+0x86>
				  hour--;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <Rotary_Hour+0x108>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <Rotary_Hour+0x108>)
 8001c6a:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);
 8001c6c:	bf00      	nop
 8001c6e:	2108      	movs	r1, #8
 8001c70:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <Rotary_Hour+0x104>)
 8001c72:	f000 fde5 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f8      	beq.n	8001c6e <Rotary_Hour+0xa2>
				  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET);// doi pha A het muc 0, len muc 1
 8001c7c:	bf00      	nop
 8001c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <Rotary_Hour+0x100>)
 8001c84:	f000 fddc 	bl	8002840 <HAL_GPIO_ReadPin>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f7      	beq.n	8001c7e <Rotary_Hour+0xb2>
				  HAL_Delay(10);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f000 fb4a 	bl	8002328 <HAL_Delay>
			  }
		  }
		  if(hour < 0) hour = 0;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <Rotary_Hour+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da02      	bge.n	8001ca2 <Rotary_Hour+0xd6>
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <Rotary_Hour+0x108>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
		  if(hour > 23)
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <Rotary_Hour+0x108>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b17      	cmp	r3, #23
 8001ca8:	dd0d      	ble.n	8001cc6 <Rotary_Hour+0xfa>
		  {
			  lcd_clear_xy(4, 0);
 8001caa:	2100      	movs	r1, #0
 8001cac:	2004      	movs	r0, #4
 8001cae:	f7ff f9e5 	bl	800107c <lcd_clear_xy>
			  lcd_clear_xy(5, 0);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2005      	movs	r0, #5
 8001cb6:	f7ff f9e1 	bl	800107c <lcd_clear_xy>
			  is = 3;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <Rotary_Hour+0x10c>)
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	601a      	str	r2, [r3, #0]
			  hour = 0;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <Rotary_Hour+0x108>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
		  }

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40010800 	.word	0x40010800
 8001cd0:	40010c00 	.word	0x40010c00
 8001cd4:	20000154 	.word	0x20000154
 8001cd8:	20000128 	.word	0x20000128

08001cdc <Rotary_Min>:
void Rotary_Min(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 8001ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce4:	483d      	ldr	r0, [pc, #244]	; (8001ddc <Rotary_Min+0x100>)
 8001ce6:	f000 fdab 	bl	8002840 <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d128      	bne.n	8001d42 <Rotary_Min+0x66>
		  {
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	483b      	ldr	r0, [pc, #236]	; (8001de0 <Rotary_Min+0x104>)
 8001cf4:	f000 fda4 	bl	8002840 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d152      	bne.n	8001da4 <Rotary_Min+0xc8>
			  {
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET);
 8001cfe:	bf00      	nop
 8001d00:	2108      	movs	r1, #8
 8001d02:	4837      	ldr	r0, [pc, #220]	; (8001de0 <Rotary_Min+0x104>)
 8001d04:	f000 fd9c 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d0f8      	beq.n	8001d00 <Rotary_Min+0x24>
				  min++;
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <Rotary_Min+0x108>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <Rotary_Min+0x108>)
 8001d16:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET); // doi pha A het muc 0, len muc 1
 8001d18:	bf00      	nop
 8001d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1e:	482f      	ldr	r0, [pc, #188]	; (8001ddc <Rotary_Min+0x100>)
 8001d20:	f000 fd8e 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f7      	beq.n	8001d1a <Rotary_Min+0x3e>
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);//doi pha B het muc 0, len muc 1
 8001d2a:	bf00      	nop
 8001d2c:	2108      	movs	r1, #8
 8001d2e:	482c      	ldr	r0, [pc, #176]	; (8001de0 <Rotary_Min+0x104>)
 8001d30:	f000 fd86 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f8      	beq.n	8001d2c <Rotary_Min+0x50>
				  HAL_Delay(10);
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	f000 faf4 	bl	8002328 <HAL_Delay>
 8001d40:	e030      	b.n	8001da4 <Rotary_Min+0xc8>
			  }
		  }
		  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001d42:	2108      	movs	r1, #8
 8001d44:	4826      	ldr	r0, [pc, #152]	; (8001de0 <Rotary_Min+0x104>)
 8001d46:	f000 fd7b 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d129      	bne.n	8001da4 <Rotary_Min+0xc8>
		  {
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)
 8001d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d54:	4821      	ldr	r0, [pc, #132]	; (8001ddc <Rotary_Min+0x100>)
 8001d56:	f000 fd73 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d121      	bne.n	8001da4 <Rotary_Min+0xc8>
			  {
				  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET );//doi pha A het muc 1, len muc 0
 8001d60:	bf00      	nop
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	481d      	ldr	r0, [pc, #116]	; (8001ddc <Rotary_Min+0x100>)
 8001d68:	f000 fd6a 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d0f7      	beq.n	8001d62 <Rotary_Min+0x86>
				  min--;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <Rotary_Min+0x108>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <Rotary_Min+0x108>)
 8001d7a:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);
 8001d7c:	bf00      	nop
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4817      	ldr	r0, [pc, #92]	; (8001de0 <Rotary_Min+0x104>)
 8001d82:	f000 fd5d 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f8      	beq.n	8001d7e <Rotary_Min+0xa2>
				  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET);// doi pha A het muc 0, len muc 1
 8001d8c:	bf00      	nop
 8001d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <Rotary_Min+0x100>)
 8001d94:	f000 fd54 	bl	8002840 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f7      	beq.n	8001d8e <Rotary_Min+0xb2>
				  HAL_Delay(10);
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f000 fac2 	bl	8002328 <HAL_Delay>
			  }
		  }
		  if(min < 0) min = 0;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <Rotary_Min+0x108>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da02      	bge.n	8001db2 <Rotary_Min+0xd6>
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <Rotary_Min+0x108>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
		  if(min > 59)
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <Rotary_Min+0x108>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b3b      	cmp	r3, #59	; 0x3b
 8001db8:	dd0d      	ble.n	8001dd6 <Rotary_Min+0xfa>
			  {
			  	  lcd_clear_xy(7, 0);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2007      	movs	r0, #7
 8001dbe:	f7ff f95d 	bl	800107c <lcd_clear_xy>
				  lcd_clear_xy(8, 0);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2008      	movs	r0, #8
 8001dc6:	f7ff f959 	bl	800107c <lcd_clear_xy>
				  is = 6;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <Rotary_Min+0x10c>)
 8001dcc:	2206      	movs	r2, #6
 8001dce:	601a      	str	r2, [r3, #0]
				  min = 0;
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <Rotary_Min+0x108>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
			  }


}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010c00 	.word	0x40010c00
 8001de4:	20000158 	.word	0x20000158
 8001de8:	20000128 	.word	0x20000128

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df0:	f000 fa38 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df4:	f000 f816 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df8:	f000 f8d0 	bl	8001f9c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001dfc:	f000 f854 	bl	8001ea8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001e00:	f000 f880 	bl	8001f04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <main+0x34>)
 8001e06:	f002 f96f 	bl	80040e8 <HAL_TIM_Base_Start>
  Lcd_Init();
 8001e0a:	f7ff f8fb 	bl	8001004 <Lcd_Init>
  Main_menu_Init();
 8001e0e:	f7ff faff 	bl	8001410 <Main_menu_Init>
  Main_menu();
 8001e12:	f7ff fb19 	bl	8001448 <Main_menu>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Main_begin_2();
 8001e16:	f7ff fb91 	bl	800153c <Main_begin_2>
	  Inside();
 8001e1a:	f7ff fc03 	bl	8001624 <Inside>
	  Main_begin_2();
 8001e1e:	e7fa      	b.n	8001e16 <main+0x2a>
 8001e20:	200001b8 	.word	0x200001b8

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b090      	sub	sp, #64	; 0x40
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0318 	add.w	r3, r7, #24
 8001e2e:	2228      	movs	r2, #40	; 0x28
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fc0c 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e4e:	2310      	movs	r3, #16
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e52:	2302      	movs	r3, #2
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e56:	2300      	movs	r3, #0
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fce9 	bl	800383c <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001e70:	f000 f8da 	bl	8002028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 ff56 	bl	8003d40 <HAL_RCC_ClockConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e9a:	f000 f8c5 	bl	8002028 <Error_Handler>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3740      	adds	r7, #64	; 0x40
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <MX_I2C2_Init+0x54>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <MX_I2C2_Init+0x58>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001ec6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <MX_I2C2_Init+0x50>)
 8001ee6:	f000 fcdb 	bl	80028a0 <HAL_I2C_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ef0:	f000 f89a 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000164 	.word	0x20000164
 8001efc:	40005800 	.word	0x40005800
 8001f00:	000186a0 	.word	0x000186a0

08001f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f2a:	223f      	movs	r2, #63	; 0x3f
 8001f2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f4a:	f002 f87d 	bl	8004048 <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f54:	f000 f868 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	4619      	mov	r1, r3
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f66:	f002 f92f 	bl	80041c8 <HAL_TIM_ConfigClockSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f70:	f000 f85a 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_TIM2_Init+0x94>)
 8001f82:	f002 fadd 	bl	8004540 <HAL_TIMEx_MasterConfigSynchronization>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f8c:	f000 f84c 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200001b8 	.word	0x200001b8

08001f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_GPIO_Init+0x80>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <MX_GPIO_Init+0x80>)
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_GPIO_Init+0x80>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_GPIO_Init+0x80>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a13      	ldr	r2, [pc, #76]	; (800201c <MX_GPIO_Init+0x80>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_GPIO_Init+0x80>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480a      	ldr	r0, [pc, #40]	; (8002020 <MX_GPIO_Init+0x84>)
 8001ff6:	f000 fa9f 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ffa:	2318      	movs	r3, #24
 8001ffc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_GPIO_Init+0x88>)
 800200e:	f000 fa93 	bl	8002538 <HAL_GPIO_Init>

}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40010800 	.word	0x40010800
 8002024:	40010c00 	.word	0x40010c00

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002030:	e7fe      	b.n	8002030 <Error_Handler+0x8>
	...

08002034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_MspInit+0x5c>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_MspInit+0x5c>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6193      	str	r3, [r2, #24]
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_MspInit+0x5c>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_MspInit+0x5c>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_MspInit+0x5c>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_MspInit+0x5c>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_MspInit+0x60>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_MspInit+0x60>)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000

08002098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_I2C_MspInit+0x74>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d124      	bne.n	8002102 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_I2C_MspInit+0x78>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_I2C_MspInit+0x78>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_I2C_MspInit+0x78>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d6:	2312      	movs	r3, #18
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	4619      	mov	r1, r3
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <HAL_I2C_MspInit+0x7c>)
 80020e6:	f000 fa27 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_I2C_MspInit+0x78>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_I2C_MspInit+0x78>)
 80020f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f4:	61d3      	str	r3, [r2, #28]
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_I2C_MspInit+0x78>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40005800 	.word	0x40005800
 8002110:	40021000 	.word	0x40021000
 8002114:	40010c00 	.word	0x40010c00

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d10b      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_TIM_Base_MspInit+0x34>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_TIM_Base_MspInit+0x34>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_TIM_Base_MspInit+0x34>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40021000 	.word	0x40021000

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler+0x4>

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002196:	f000 f8ab 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f002 fa14 	bl	80045fc <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20005000 	.word	0x20005000
 8002200:	00000400 	.word	0x00000400
 8002204:	20000200 	.word	0x20000200
 8002208:	20000218 	.word	0x20000218

0800220c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221a:	490d      	ldr	r1, [pc, #52]	; (8002250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002230:	4c0a      	ldr	r4, [pc, #40]	; (800225c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223e:	f7ff ffe5 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f002 f9e1 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002246:	f7ff fdd1 	bl	8001dec <main>
  bx lr
 800224a:	4770      	bx	lr
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8002254:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8002258:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800225c:	20000218 	.word	0x20000218

08002260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC1_2_IRQHandler>
	...

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_Init+0x28>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a07      	ldr	r2, [pc, #28]	; (800228c <HAL_Init+0x28>)
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002274:	2003      	movs	r0, #3
 8002276:	f000 f92b 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227a:	200f      	movs	r0, #15
 800227c:	f000 f808 	bl	8002290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002280:	f7ff fed8 	bl	8002034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40022000 	.word	0x40022000

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x54>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_InitTick+0x58>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f935 	bl	800251e <HAL_SYSTICK_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00e      	b.n	80022dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d80a      	bhi.n	80022da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f000 f90b 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <HAL_InitTick+0x5c>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000078 	.word	0x20000078
 80022e8:	20000080 	.word	0x20000080
 80022ec:	2000007c 	.word	0x2000007c

080022f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x1c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_IncTick+0x20>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a03      	ldr	r2, [pc, #12]	; (8002310 <HAL_IncTick+0x20>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000080 	.word	0x20000080
 8002310:	20000204 	.word	0x20000204

08002314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <HAL_GetTick+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000204 	.word	0x20000204

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff fff0 	bl	8002314 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffe0 	bl	8002314 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000080 	.word	0x20000080

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff90 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff49 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff5e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff90 	bl	8002428 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5f 	bl	80023d4 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffb0 	bl	800248c <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b08b      	sub	sp, #44	; 0x2c
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	e169      	b.n	8002820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800254c:	2201      	movs	r2, #1
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	429a      	cmp	r2, r3
 8002566:	f040 8158 	bne.w	800281a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a9a      	ldr	r2, [pc, #616]	; (80027d8 <HAL_GPIO_Init+0x2a0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d05e      	beq.n	8002632 <HAL_GPIO_Init+0xfa>
 8002574:	4a98      	ldr	r2, [pc, #608]	; (80027d8 <HAL_GPIO_Init+0x2a0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d875      	bhi.n	8002666 <HAL_GPIO_Init+0x12e>
 800257a:	4a98      	ldr	r2, [pc, #608]	; (80027dc <HAL_GPIO_Init+0x2a4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d058      	beq.n	8002632 <HAL_GPIO_Init+0xfa>
 8002580:	4a96      	ldr	r2, [pc, #600]	; (80027dc <HAL_GPIO_Init+0x2a4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d86f      	bhi.n	8002666 <HAL_GPIO_Init+0x12e>
 8002586:	4a96      	ldr	r2, [pc, #600]	; (80027e0 <HAL_GPIO_Init+0x2a8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d052      	beq.n	8002632 <HAL_GPIO_Init+0xfa>
 800258c:	4a94      	ldr	r2, [pc, #592]	; (80027e0 <HAL_GPIO_Init+0x2a8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d869      	bhi.n	8002666 <HAL_GPIO_Init+0x12e>
 8002592:	4a94      	ldr	r2, [pc, #592]	; (80027e4 <HAL_GPIO_Init+0x2ac>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d04c      	beq.n	8002632 <HAL_GPIO_Init+0xfa>
 8002598:	4a92      	ldr	r2, [pc, #584]	; (80027e4 <HAL_GPIO_Init+0x2ac>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d863      	bhi.n	8002666 <HAL_GPIO_Init+0x12e>
 800259e:	4a92      	ldr	r2, [pc, #584]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d046      	beq.n	8002632 <HAL_GPIO_Init+0xfa>
 80025a4:	4a90      	ldr	r2, [pc, #576]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d85d      	bhi.n	8002666 <HAL_GPIO_Init+0x12e>
 80025aa:	2b12      	cmp	r3, #18
 80025ac:	d82a      	bhi.n	8002604 <HAL_GPIO_Init+0xcc>
 80025ae:	2b12      	cmp	r3, #18
 80025b0:	d859      	bhi.n	8002666 <HAL_GPIO_Init+0x12e>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <HAL_GPIO_Init+0x80>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	08002633 	.word	0x08002633
 80025bc:	0800260d 	.word	0x0800260d
 80025c0:	0800261f 	.word	0x0800261f
 80025c4:	08002661 	.word	0x08002661
 80025c8:	08002667 	.word	0x08002667
 80025cc:	08002667 	.word	0x08002667
 80025d0:	08002667 	.word	0x08002667
 80025d4:	08002667 	.word	0x08002667
 80025d8:	08002667 	.word	0x08002667
 80025dc:	08002667 	.word	0x08002667
 80025e0:	08002667 	.word	0x08002667
 80025e4:	08002667 	.word	0x08002667
 80025e8:	08002667 	.word	0x08002667
 80025ec:	08002667 	.word	0x08002667
 80025f0:	08002667 	.word	0x08002667
 80025f4:	08002667 	.word	0x08002667
 80025f8:	08002667 	.word	0x08002667
 80025fc:	08002615 	.word	0x08002615
 8002600:	08002629 	.word	0x08002629
 8002604:	4a79      	ldr	r2, [pc, #484]	; (80027ec <HAL_GPIO_Init+0x2b4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800260a:	e02c      	b.n	8002666 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	623b      	str	r3, [r7, #32]
          break;
 8002612:	e029      	b.n	8002668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	3304      	adds	r3, #4
 800261a:	623b      	str	r3, [r7, #32]
          break;
 800261c:	e024      	b.n	8002668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	3308      	adds	r3, #8
 8002624:	623b      	str	r3, [r7, #32]
          break;
 8002626:	e01f      	b.n	8002668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	330c      	adds	r3, #12
 800262e:	623b      	str	r3, [r7, #32]
          break;
 8002630:	e01a      	b.n	8002668 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800263a:	2304      	movs	r3, #4
 800263c:	623b      	str	r3, [r7, #32]
          break;
 800263e:	e013      	b.n	8002668 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002648:	2308      	movs	r3, #8
 800264a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	611a      	str	r2, [r3, #16]
          break;
 8002652:	e009      	b.n	8002668 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002654:	2308      	movs	r3, #8
 8002656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	615a      	str	r2, [r3, #20]
          break;
 800265e:	e003      	b.n	8002668 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
          break;
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x130>
          break;
 8002666:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2bff      	cmp	r3, #255	; 0xff
 800266c:	d801      	bhi.n	8002672 <HAL_GPIO_Init+0x13a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	e001      	b.n	8002676 <HAL_GPIO_Init+0x13e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2bff      	cmp	r3, #255	; 0xff
 800267c:	d802      	bhi.n	8002684 <HAL_GPIO_Init+0x14c>
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	e002      	b.n	800268a <HAL_GPIO_Init+0x152>
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	3b08      	subs	r3, #8
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	210f      	movs	r1, #15
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	6a39      	ldr	r1, [r7, #32]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	431a      	orrs	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80b1 	beq.w	800281a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026b8:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_GPIO_Init+0x2b8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <HAL_GPIO_Init+0x2b8>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_GPIO_Init+0x2b8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026d0:	4a48      	ldr	r2, [pc, #288]	; (80027f4 <HAL_GPIO_Init+0x2bc>)
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <HAL_GPIO_Init+0x2c0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <HAL_GPIO_Init+0x1ec>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3f      	ldr	r2, [pc, #252]	; (80027fc <HAL_GPIO_Init+0x2c4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00d      	beq.n	8002720 <HAL_GPIO_Init+0x1e8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3e      	ldr	r2, [pc, #248]	; (8002800 <HAL_GPIO_Init+0x2c8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <HAL_GPIO_Init+0x1e4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3d      	ldr	r2, [pc, #244]	; (8002804 <HAL_GPIO_Init+0x2cc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d101      	bne.n	8002718 <HAL_GPIO_Init+0x1e0>
 8002714:	2303      	movs	r3, #3
 8002716:	e006      	b.n	8002726 <HAL_GPIO_Init+0x1ee>
 8002718:	2304      	movs	r3, #4
 800271a:	e004      	b.n	8002726 <HAL_GPIO_Init+0x1ee>
 800271c:	2302      	movs	r3, #2
 800271e:	e002      	b.n	8002726 <HAL_GPIO_Init+0x1ee>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_GPIO_Init+0x1ee>
 8002724:	2300      	movs	r3, #0
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	f002 0203 	and.w	r2, r2, #3
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	4093      	lsls	r3, r2
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002736:	492f      	ldr	r1, [pc, #188]	; (80027f4 <HAL_GPIO_Init+0x2bc>)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	492c      	ldr	r1, [pc, #176]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800275e:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	43db      	mvns	r3, r3
 8002766:	4928      	ldr	r1, [pc, #160]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 8002768:	4013      	ands	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4922      	ldr	r1, [pc, #136]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	43db      	mvns	r3, r3
 800278e:	491e      	ldr	r1, [pc, #120]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 8002790:	4013      	ands	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4918      	ldr	r1, [pc, #96]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4914      	ldr	r1, [pc, #80]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d021      	beq.n	800280c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
 80027d4:	e021      	b.n	800281a <HAL_GPIO_Init+0x2e2>
 80027d6:	bf00      	nop
 80027d8:	10320000 	.word	0x10320000
 80027dc:	10310000 	.word	0x10310000
 80027e0:	10220000 	.word	0x10220000
 80027e4:	10210000 	.word	0x10210000
 80027e8:	10120000 	.word	0x10120000
 80027ec:	10110000 	.word	0x10110000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40010800 	.word	0x40010800
 80027fc:	40010c00 	.word	0x40010c00
 8002800:	40011000 	.word	0x40011000
 8002804:	40011400 	.word	0x40011400
 8002808:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_GPIO_Init+0x304>)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	43db      	mvns	r3, r3
 8002814:	4909      	ldr	r1, [pc, #36]	; (800283c <HAL_GPIO_Init+0x304>)
 8002816:	4013      	ands	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	3301      	adds	r3, #1
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	f47f ae8e 	bne.w	800254c <HAL_GPIO_Init+0x14>
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	372c      	adds	r7, #44	; 0x2c
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40010400 	.word	0x40010400

08002840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e001      	b.n	8002862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	807b      	strh	r3, [r7, #2]
 800287a:	4613      	mov	r3, r2
 800287c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002884:	887a      	ldrh	r2, [r7, #2]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800288a:	e003      	b.n	8002894 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	041a      	lsls	r2, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e12b      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fbe6 	bl	8002098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	; 0x24
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002904:	f001 fb6e 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a81      	ldr	r2, [pc, #516]	; (8002b14 <HAL_I2C_Init+0x274>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d807      	bhi.n	8002924 <HAL_I2C_Init+0x84>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a80      	ldr	r2, [pc, #512]	; (8002b18 <HAL_I2C_Init+0x278>)
 8002918:	4293      	cmp	r3, r2
 800291a:	bf94      	ite	ls
 800291c:	2301      	movls	r3, #1
 800291e:	2300      	movhi	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e006      	b.n	8002932 <HAL_I2C_Init+0x92>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <HAL_I2C_Init+0x27c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0e7      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a78      	ldr	r2, [pc, #480]	; (8002b20 <HAL_I2C_Init+0x280>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9b      	lsrs	r3, r3, #18
 8002944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <HAL_I2C_Init+0x274>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d802      	bhi.n	8002974 <HAL_I2C_Init+0xd4>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	e009      	b.n	8002988 <HAL_I2C_Init+0xe8>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <HAL_I2C_Init+0x284>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	3301      	adds	r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	495c      	ldr	r1, [pc, #368]	; (8002b14 <HAL_I2C_Init+0x274>)
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d819      	bhi.n	80029dc <HAL_I2C_Init+0x13c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e59      	subs	r1, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_I2C_Init+0x138>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e59      	subs	r1, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	e051      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029d8:	2304      	movs	r3, #4
 80029da:	e04f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <HAL_I2C_Init+0x168>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e012      	b.n	8002a2e <HAL_I2C_Init+0x18e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x196>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10e      	bne.n	8002a5c <HAL_I2C_Init+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e58      	subs	r0, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6911      	ldr	r1, [r2, #16]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	000186a0 	.word	0x000186a0
 8002b18:	001e847f 	.word	0x001e847f
 8002b1c:	003d08ff 	.word	0x003d08ff
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	461a      	mov	r2, r3
 8002b34:	460b      	mov	r3, r1
 8002b36:	817b      	strh	r3, [r7, #10]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff fbea 	bl	8002314 <HAL_GetTick>
 8002b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	f040 80e0 	bne.w	8002d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2319      	movs	r3, #25
 8002b56:	2201      	movs	r2, #1
 8002b58:	4970      	ldr	r1, [pc, #448]	; (8002d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fc92 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0d3      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2C_Master_Transmit+0x50>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0cc      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d007      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2221      	movs	r2, #33	; 0x21
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	893a      	ldrh	r2, [r7, #8]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a50      	ldr	r2, [pc, #320]	; (8002d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002be0:	8979      	ldrh	r1, [r7, #10]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fafc 	bl	80031e4 <I2C_MasterRequestWrite>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e08d      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c0c:	e066      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	6a39      	ldr	r1, [r7, #32]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fd0c 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d107      	bne.n	8002c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d11b      	bne.n	8002cb0 <HAL_I2C_Master_Transmit+0x188>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d017      	beq.n	8002cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	6a39      	ldr	r1, [r7, #32]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fcfc 	bl	80036b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d107      	bne.n	8002cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e01a      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d194      	bne.n	8002c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	00100002 	.word	0x00100002
 8002d20:	ffff0000 	.word	0xffff0000

08002d24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff faea 	bl	8002314 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	f040 823f 	bne.w	80031ce <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	497f      	ldr	r1, [pc, #508]	; (8002f58 <HAL_I2C_Master_Receive+0x234>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fb92 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
 8002d68:	e232      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2C_Master_Receive+0x54>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e22b      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d007      	beq.n	8002d9e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2222      	movs	r2, #34	; 0x22
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2210      	movs	r2, #16
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	893a      	ldrh	r2, [r7, #8]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a5f      	ldr	r2, [pc, #380]	; (8002f5c <HAL_I2C_Master_Receive+0x238>)
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002de0:	8979      	ldrh	r1, [r7, #10]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa7e 	bl	80032e8 <I2C_MasterRequestRead>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1ec      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d113      	bne.n	8002e26 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e1c0      	b.n	80031a8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d11e      	bne.n	8002e6c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3e:	b672      	cpsid	i
}
 8002e40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e68:	b662      	cpsie	i
}
 8002e6a:	e035      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d11e      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e84:	b672      	cpsid	i
}
 8002e86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eae:	b662      	cpsie	i
}
 8002eb0:	e012      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ed8:	e166      	b.n	80031a8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	f200 811f 	bhi.w	8003122 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d123      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fc1f 	bl	8003734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e167      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f32:	e139      	b.n	80031a8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d152      	bne.n	8002fe2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	4906      	ldr	r1, [pc, #24]	; (8002f60 <HAL_I2C_Master_Receive+0x23c>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa9c 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e13c      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000
 8002f60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f64:	b672      	cpsid	i
}
 8002f66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002faa:	b662      	cpsie	i
}
 8002fac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe0:	e0e2      	b.n	80031a8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	2200      	movs	r2, #0
 8002fea:	497b      	ldr	r1, [pc, #492]	; (80031d8 <HAL_I2C_Master_Receive+0x4b4>)
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa49 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0e9      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003042:	4b66      	ldr	r3, [pc, #408]	; (80031dc <HAL_I2C_Master_Receive+0x4b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_I2C_Master_Receive+0x4bc>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0a1a      	lsrs	r2, r3, #8
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00da      	lsls	r2, r3, #3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	3b01      	subs	r3, #1
 8003060:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d118      	bne.n	800309a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800308a:	b662      	cpsie	i
}
 800308c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e09a      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d1d9      	bne.n	800305c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030ea:	b662      	cpsie	i
}
 80030ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003120:	e042      	b.n	80031a8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fb04 	bl	8003734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e04c      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d118      	bne.n	80031a8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f ae94 	bne.w	8002eda <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	00010004 	.word	0x00010004
 80031dc:	20000078 	.word	0x20000078
 80031e0:	14f8b589 	.word	0x14f8b589

080031e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	460b      	mov	r3, r1
 80031f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d006      	beq.n	800320e <I2C_MasterRequestWrite+0x2a>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d003      	beq.n	800320e <I2C_MasterRequestWrite+0x2a>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800320c:	d108      	bne.n	8003220 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e00b      	b.n	8003238 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	2b12      	cmp	r3, #18
 8003226:	d107      	bne.n	8003238 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f91d 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325e:	d103      	bne.n	8003268 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e035      	b.n	80032d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003274:	d108      	bne.n	8003288 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e01b      	b.n	80032c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003288:	897b      	ldrh	r3, [r7, #10]
 800328a:	11db      	asrs	r3, r3, #7
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 0306 	and.w	r3, r3, #6
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f063 030f 	orn	r3, r3, #15
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <I2C_MasterRequestWrite+0xfc>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f943 	bl	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e010      	b.n	80032d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4907      	ldr	r1, [pc, #28]	; (80032e4 <I2C_MasterRequestWrite+0x100>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f933 	bl	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00010008 	.word	0x00010008
 80032e4:	00010002 	.word	0x00010002

080032e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	460b      	mov	r3, r1
 80032f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800330c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d006      	beq.n	8003322 <I2C_MasterRequestRead+0x3a>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d003      	beq.n	8003322 <I2C_MasterRequestRead+0x3a>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003320:	d108      	bne.n	8003334 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e00b      	b.n	800334c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	2b11      	cmp	r3, #17
 800333a:	d107      	bne.n	800334c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f893 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	d103      	bne.n	800337c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e079      	b.n	8003474 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003388:	d108      	bne.n	800339c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	e05f      	b.n	800345c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800339c:	897b      	ldrh	r3, [r7, #10]
 800339e:	11db      	asrs	r3, r3, #7
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0306 	and.w	r3, r3, #6
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f063 030f 	orn	r3, r3, #15
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4930      	ldr	r1, [pc, #192]	; (800347c <I2C_MasterRequestRead+0x194>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8b9 	bl	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e054      	b.n	8003474 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4929      	ldr	r1, [pc, #164]	; (8003480 <I2C_MasterRequestRead+0x198>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8a9 	bl	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e044      	b.n	8003474 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f831 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003436:	d103      	bne.n	8003440 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e017      	b.n	8003474 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	11db      	asrs	r3, r3, #7
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0306 	and.w	r3, r3, #6
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f063 030e 	orn	r3, r3, #14
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <I2C_MasterRequestRead+0x198>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f865 	bl	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	00010008 	.word	0x00010008
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	e025      	b.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d021      	beq.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe ff39 	bl	8002314 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d116      	bne.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e023      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10d      	bne.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	e00c      	b.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	429a      	cmp	r2, r3
 8003526:	d0b6      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003540:	e051      	b.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d123      	bne.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e046      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d021      	beq.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fe feb7 	bl	8002314 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d116      	bne.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e020      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10c      	bne.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e00b      	b.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d18d      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800363c:	e02d      	b.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f8ce 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02d      	b.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d021      	beq.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe fe5d 	bl	8002314 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d1ca      	bne.n	800363e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036be:	e02d      	b.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f88d 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e02d      	b.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d021      	beq.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fe fe1c 	bl	8002314 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e007      	b.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d1ca      	bne.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003740:	e042      	b.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d119      	bne.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0210 	mvn.w	r2, #16
 8003758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e029      	b.n	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fe fdc6 	bl	8002314 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e007      	b.n	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d1b5      	bne.n	8003742 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d11b      	bne.n	8003830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e272      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8087 	beq.w	800396a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800385c:	4b92      	ldr	r3, [pc, #584]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b04      	cmp	r3, #4
 8003866:	d00c      	beq.n	8003882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003868:	4b8f      	ldr	r3, [pc, #572]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d112      	bne.n	800389a <HAL_RCC_OscConfig+0x5e>
 8003874:	4b8c      	ldr	r3, [pc, #560]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d10b      	bne.n	800389a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003882:	4b89      	ldr	r3, [pc, #548]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d06c      	beq.n	8003968 <HAL_RCC_OscConfig+0x12c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d168      	bne.n	8003968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e24c      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x76>
 80038a4:	4b80      	ldr	r3, [pc, #512]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a7f      	ldr	r2, [pc, #508]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e02e      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x98>
 80038ba:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7a      	ldr	r2, [pc, #488]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a77      	ldr	r2, [pc, #476]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e01d      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0xbc>
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a71      	ldr	r2, [pc, #452]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b6f      	ldr	r3, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6e      	ldr	r2, [pc, #440]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038f8:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6a      	ldr	r2, [pc, #424]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800390a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fcfc 	bl	8002314 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe fcf8 	bl	8002314 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e200      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0xe4>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fce8 	bl	8002314 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7fe fce4 	bl	8002314 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1ec      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x10c>
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d063      	beq.n	8003a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d11c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x18c>
 800398e:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x176>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e1c0      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4939      	ldr	r1, [pc, #228]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	e03a      	b.n	8003a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fe fc9d 	bl	8002314 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7fe fc99 	bl	8002314 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1a1      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4927      	ldr	r1, [pc, #156]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe fc7c 	bl	8002314 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fe fc78 	bl	8002314 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e180      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03a      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7fe fc5c 	bl	8002314 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7fe fc58 	bl	8002314 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e160      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f000 fac4 	bl	800400c <RCC_Delay>
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fc42 	bl	8002314 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a92:	e00f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fe fc3e 	bl	8002314 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d908      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e146      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	42420000 	.word	0x42420000
 8003ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e9      	bne.n	8003a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a6 	beq.w	8003c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b8b      	ldr	r3, [pc, #556]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10d      	bne.n	8003afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4a87      	ldr	r2, [pc, #540]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	61d3      	str	r3, [r2, #28]
 8003aea:	4b85      	ldr	r3, [pc, #532]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b7f      	ldr	r3, [pc, #508]	; (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7e      	ldr	r2, [pc, #504]	; (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7fe fbff 	bl	8002314 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fe fbfb 	bl	8002314 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e103      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b75      	ldr	r3, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x312>
 8003b40:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6213      	str	r3, [r2, #32]
 8003b4c:	e02d      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x334>
 8003b56:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6213      	str	r3, [r2, #32]
 8003b62:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a66      	ldr	r2, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	6213      	str	r3, [r2, #32]
 8003b6e:	e01c      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x356>
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a60      	ldr	r2, [pc, #384]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a5d      	ldr	r2, [pc, #372]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	e00b      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b92:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a5a      	ldr	r2, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6213      	str	r3, [r2, #32]
 8003b9e:	4b58      	ldr	r3, [pc, #352]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a57      	ldr	r2, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f023 0304 	bic.w	r3, r3, #4
 8003ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d015      	beq.n	8003bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fbaf 	bl	8002314 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe fbab 	bl	8002314 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0b1      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ee      	beq.n	8003bba <HAL_RCC_OscConfig+0x37e>
 8003bdc:	e014      	b.n	8003c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe fb99 	bl	8002314 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe fb95 	bl	8002314 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e09b      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ee      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a3b      	ldr	r2, [pc, #236]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8087 	beq.w	8003d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d061      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d146      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fb69 	bl	8002314 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe fb65 	bl	8002314 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e06d      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d108      	bne.n	8003c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4921      	ldr	r1, [pc, #132]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a19      	ldr	r1, [r3, #32]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	430b      	orrs	r3, r1
 8003c92:	491b      	ldr	r1, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x4cc>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fb39 	bl	8002314 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fb35 	bl	8002314 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e03d      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x46a>
 8003cc4:	e035      	b.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fb22 	bl	8002314 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe fb1e 	bl	8002314 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e026      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x498>
 8003cf2:	e01e      	b.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e019      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_OscConfig+0x500>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000

08003d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0d0      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b67      	ldr	r3, [pc, #412]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 0207 	bic.w	r2, r3, #7
 8003d6a:	4965      	ldr	r1, [pc, #404]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d9c:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a58      	ldr	r2, [pc, #352]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	494d      	ldr	r1, [pc, #308]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d040      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d115      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e073      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4936      	ldr	r1, [pc, #216]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fa70 	bl	8002314 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fe fa6c 	bl	8002314 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e053      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d210      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 0207 	bic.w	r2, r3, #7
 8003e76:	4922      	ldr	r1, [pc, #136]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4916      	ldr	r1, [pc, #88]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	490e      	ldr	r1, [pc, #56]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ece:	f000 f821 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	490a      	ldr	r1, [pc, #40]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1d0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe f9ce 	bl	8002290 <HAL_InitTick>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08005040 	.word	0x08005040
 8003f0c:	20000078 	.word	0x20000078
 8003f10:	2000007c 	.word	0x2000007c

08003f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b490      	push	{r4, r7}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f1c:	1d3c      	adds	r4, r7, #4
 8003f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f24:	f240 2301 	movw	r3, #513	; 0x201
 8003f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d002      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x40>
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d003      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x46>
 8003f52:	e02b      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f56:	623b      	str	r3, [r7, #32]
      break;
 8003f58:	e02b      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	0c9b      	lsrs	r3, r3, #18
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3328      	adds	r3, #40	; 0x28
 8003f64:	443b      	add	r3, r7
 8003f66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	0c5b      	lsrs	r3, r3, #17
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	3328      	adds	r3, #40	; 0x28
 8003f82:	443b      	add	r3, r7
 8003f84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f8e:	fb03 f202 	mul.w	r2, r3, r2
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	623b      	str	r3, [r7, #32]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fae:	623b      	str	r3, [r7, #32]
      break;
 8003fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3728      	adds	r7, #40	; 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc90      	pop	{r4, r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	08005030 	.word	0x08005030
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	007a1200 	.word	0x007a1200
 8003fcc:	003d0900 	.word	0x003d0900

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	20000078 	.word	0x20000078

08003fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fe8:	f7ff fff2 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	4903      	ldr	r1, [pc, #12]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffa:	5ccb      	ldrb	r3, [r1, r3]
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	08005050 	.word	0x08005050

0800400c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <RCC_Delay+0x34>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <RCC_Delay+0x38>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0a5b      	lsrs	r3, r3, #9
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004028:	bf00      	nop
  }
  while (Delay --);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	60fa      	str	r2, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f9      	bne.n	8004028 <RCC_Delay+0x1c>
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	20000078 	.word	0x20000078
 8004044:	10624dd3 	.word	0x10624dd3

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e041      	b.n	80040de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fe f852 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 f962 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	; (8004170 <HAL_TIM_Base_Start+0x88>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <HAL_TIM_Base_Start+0x48>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d009      	beq.n	8004130 <HAL_TIM_Base_Start+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <HAL_TIM_Base_Start+0x8c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIM_Base_Start+0x48>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <HAL_TIM_Base_Start+0x90>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d111      	bne.n	8004154 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b06      	cmp	r3, #6
 8004140:	d010      	beq.n	8004164 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e007      	b.n	8004164 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800

0800417c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	f241 1311 	movw	r3, #4369	; 0x1111
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10f      	bne.n	80041b4 <HAL_TIM_Base_Stop+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	f240 4344 	movw	r3, #1092	; 0x444
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_Base_Stop+0x38>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIM_ConfigClockSource+0x18>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0b3      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x180>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004218:	d03e      	beq.n	8004298 <HAL_TIM_ConfigClockSource+0xd0>
 800421a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421e:	f200 8087 	bhi.w	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004226:	f000 8085 	beq.w	8004334 <HAL_TIM_ConfigClockSource+0x16c>
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	d87f      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004230:	2b70      	cmp	r3, #112	; 0x70
 8004232:	d01a      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xa2>
 8004234:	2b70      	cmp	r3, #112	; 0x70
 8004236:	d87b      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004238:	2b60      	cmp	r3, #96	; 0x60
 800423a:	d050      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x116>
 800423c:	2b60      	cmp	r3, #96	; 0x60
 800423e:	d877      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004240:	2b50      	cmp	r3, #80	; 0x50
 8004242:	d03c      	beq.n	80042be <HAL_TIM_ConfigClockSource+0xf6>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d873      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d058      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x136>
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d86f      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004250:	2b30      	cmp	r3, #48	; 0x30
 8004252:	d064      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x156>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d86b      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004258:	2b20      	cmp	r3, #32
 800425a:	d060      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x156>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d867      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05c      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x156>
 8004264:	2b10      	cmp	r3, #16
 8004266:	d05a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004268:	e062      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6899      	ldr	r1, [r3, #8]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f000 f942 	bl	8004502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800428c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	609a      	str	r2, [r3, #8]
      break;
 8004296:	e04e      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f000 f92b 	bl	8004502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ba:	609a      	str	r2, [r3, #8]
      break;
 80042bc:	e03b      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 f8a2 	bl	8004414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2150      	movs	r1, #80	; 0x50
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f8f9 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 80042dc:	e02b      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 f8c0 	bl	8004470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2160      	movs	r1, #96	; 0x60
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f8e9 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 80042fc:	e01b      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	461a      	mov	r2, r3
 800430c:	f000 f882 	bl	8004414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f8d9 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 800431c:	e00b      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f000 f8d0 	bl	80044ce <TIM_ITRx_SetConfig>
        break;
 800432e:	e002      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004330:	bf00      	nop
 8004332:	e000      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004334:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a26      	ldr	r2, [pc, #152]	; (800440c <TIM_Base_SetConfig+0xbc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <TIM_Base_SetConfig+0xc0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <TIM_Base_SetConfig+0xbc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_Base_SetConfig+0xc0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800

08004414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 030a 	bic.w	r3, r3, #10
 8004450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0210 	bic.w	r2, r3, #16
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800449a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	031b      	lsls	r3, r3, #12
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0307 	orr.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr

08004502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800451c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	431a      	orrs	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	609a      	str	r2, [r3, #8]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e046      	b.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d009      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10c      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	; (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000084 	.word	0x20000084

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	2600      	movs	r6, #0
 800460c:	4d0c      	ldr	r5, [pc, #48]	; (8004640 <__libc_init_array+0x38>)
 800460e:	4c0d      	ldr	r4, [pc, #52]	; (8004644 <__libc_init_array+0x3c>)
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	f000 fc9c 	bl	8004f54 <_init>
 800461c:	2600      	movs	r6, #0
 800461e:	4d0a      	ldr	r5, [pc, #40]	; (8004648 <__libc_init_array+0x40>)
 8004620:	4c0a      	ldr	r4, [pc, #40]	; (800464c <__libc_init_array+0x44>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	0800508c 	.word	0x0800508c
 8004644:	0800508c 	.word	0x0800508c
 8004648:	0800508c 	.word	0x0800508c
 800464c:	08005090 	.word	0x08005090

08004650 <memset>:
 8004650:	4603      	mov	r3, r0
 8004652:	4402      	add	r2, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <siprintf>:
 8004660:	b40e      	push	{r1, r2, r3}
 8004662:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004666:	b500      	push	{lr}
 8004668:	b09c      	sub	sp, #112	; 0x70
 800466a:	ab1d      	add	r3, sp, #116	; 0x74
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	9006      	str	r0, [sp, #24]
 8004670:	9107      	str	r1, [sp, #28]
 8004672:	9104      	str	r1, [sp, #16]
 8004674:	4808      	ldr	r0, [pc, #32]	; (8004698 <siprintf+0x38>)
 8004676:	4909      	ldr	r1, [pc, #36]	; (800469c <siprintf+0x3c>)
 8004678:	f853 2b04 	ldr.w	r2, [r3], #4
 800467c:	9105      	str	r1, [sp, #20]
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	a902      	add	r1, sp, #8
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	f000 f868 	bl	8004758 <_svfiprintf_r>
 8004688:	2200      	movs	r2, #0
 800468a:	9b02      	ldr	r3, [sp, #8]
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	b01c      	add	sp, #112	; 0x70
 8004690:	f85d eb04 	ldr.w	lr, [sp], #4
 8004694:	b003      	add	sp, #12
 8004696:	4770      	bx	lr
 8004698:	20000084 	.word	0x20000084
 800469c:	ffff0208 	.word	0xffff0208

080046a0 <__ssputs_r>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	688e      	ldr	r6, [r1, #8]
 80046a6:	4682      	mov	sl, r0
 80046a8:	429e      	cmp	r6, r3
 80046aa:	460c      	mov	r4, r1
 80046ac:	4690      	mov	r8, r2
 80046ae:	461f      	mov	r7, r3
 80046b0:	d838      	bhi.n	8004724 <__ssputs_r+0x84>
 80046b2:	898a      	ldrh	r2, [r1, #12]
 80046b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046b8:	d032      	beq.n	8004720 <__ssputs_r+0x80>
 80046ba:	6825      	ldr	r5, [r4, #0]
 80046bc:	6909      	ldr	r1, [r1, #16]
 80046be:	3301      	adds	r3, #1
 80046c0:	eba5 0901 	sub.w	r9, r5, r1
 80046c4:	6965      	ldr	r5, [r4, #20]
 80046c6:	444b      	add	r3, r9
 80046c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046d0:	106d      	asrs	r5, r5, #1
 80046d2:	429d      	cmp	r5, r3
 80046d4:	bf38      	it	cc
 80046d6:	461d      	movcc	r5, r3
 80046d8:	0553      	lsls	r3, r2, #21
 80046da:	d531      	bpl.n	8004740 <__ssputs_r+0xa0>
 80046dc:	4629      	mov	r1, r5
 80046de:	f000 fb6f 	bl	8004dc0 <_malloc_r>
 80046e2:	4606      	mov	r6, r0
 80046e4:	b950      	cbnz	r0, 80046fc <__ssputs_r+0x5c>
 80046e6:	230c      	movs	r3, #12
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	f8ca 3000 	str.w	r3, [sl]
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	464a      	mov	r2, r9
 80046fe:	6921      	ldr	r1, [r4, #16]
 8004700:	f000 face 	bl	8004ca0 <memcpy>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800470a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	6126      	str	r6, [r4, #16]
 8004712:	444e      	add	r6, r9
 8004714:	6026      	str	r6, [r4, #0]
 8004716:	463e      	mov	r6, r7
 8004718:	6165      	str	r5, [r4, #20]
 800471a:	eba5 0509 	sub.w	r5, r5, r9
 800471e:	60a5      	str	r5, [r4, #8]
 8004720:	42be      	cmp	r6, r7
 8004722:	d900      	bls.n	8004726 <__ssputs_r+0x86>
 8004724:	463e      	mov	r6, r7
 8004726:	4632      	mov	r2, r6
 8004728:	4641      	mov	r1, r8
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	f000 fac6 	bl	8004cbc <memmove>
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	2000      	movs	r0, #0
 8004734:	1b9b      	subs	r3, r3, r6
 8004736:	60a3      	str	r3, [r4, #8]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	4433      	add	r3, r6
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	e7db      	b.n	80046f8 <__ssputs_r+0x58>
 8004740:	462a      	mov	r2, r5
 8004742:	f000 fbb1 	bl	8004ea8 <_realloc_r>
 8004746:	4606      	mov	r6, r0
 8004748:	2800      	cmp	r0, #0
 800474a:	d1e1      	bne.n	8004710 <__ssputs_r+0x70>
 800474c:	4650      	mov	r0, sl
 800474e:	6921      	ldr	r1, [r4, #16]
 8004750:	f000 face 	bl	8004cf0 <_free_r>
 8004754:	e7c7      	b.n	80046e6 <__ssputs_r+0x46>
	...

08004758 <_svfiprintf_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4698      	mov	r8, r3
 800475e:	898b      	ldrh	r3, [r1, #12]
 8004760:	4607      	mov	r7, r0
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	460d      	mov	r5, r1
 8004766:	4614      	mov	r4, r2
 8004768:	b09d      	sub	sp, #116	; 0x74
 800476a:	d50e      	bpl.n	800478a <_svfiprintf_r+0x32>
 800476c:	690b      	ldr	r3, [r1, #16]
 800476e:	b963      	cbnz	r3, 800478a <_svfiprintf_r+0x32>
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	f000 fb25 	bl	8004dc0 <_malloc_r>
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	6128      	str	r0, [r5, #16]
 800477a:	b920      	cbnz	r0, 8004786 <_svfiprintf_r+0x2e>
 800477c:	230c      	movs	r3, #12
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	e0d1      	b.n	800492a <_svfiprintf_r+0x1d2>
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	616b      	str	r3, [r5, #20]
 800478a:	2300      	movs	r3, #0
 800478c:	9309      	str	r3, [sp, #36]	; 0x24
 800478e:	2320      	movs	r3, #32
 8004790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004794:	2330      	movs	r3, #48	; 0x30
 8004796:	f04f 0901 	mov.w	r9, #1
 800479a:	f8cd 800c 	str.w	r8, [sp, #12]
 800479e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004944 <_svfiprintf_r+0x1ec>
 80047a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047a6:	4623      	mov	r3, r4
 80047a8:	469a      	mov	sl, r3
 80047aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ae:	b10a      	cbz	r2, 80047b4 <_svfiprintf_r+0x5c>
 80047b0:	2a25      	cmp	r2, #37	; 0x25
 80047b2:	d1f9      	bne.n	80047a8 <_svfiprintf_r+0x50>
 80047b4:	ebba 0b04 	subs.w	fp, sl, r4
 80047b8:	d00b      	beq.n	80047d2 <_svfiprintf_r+0x7a>
 80047ba:	465b      	mov	r3, fp
 80047bc:	4622      	mov	r2, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	4638      	mov	r0, r7
 80047c2:	f7ff ff6d 	bl	80046a0 <__ssputs_r>
 80047c6:	3001      	adds	r0, #1
 80047c8:	f000 80aa 	beq.w	8004920 <_svfiprintf_r+0x1c8>
 80047cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ce:	445a      	add	r2, fp
 80047d0:	9209      	str	r2, [sp, #36]	; 0x24
 80047d2:	f89a 3000 	ldrb.w	r3, [sl]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80a2 	beq.w	8004920 <_svfiprintf_r+0x1c8>
 80047dc:	2300      	movs	r3, #0
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e6:	f10a 0a01 	add.w	sl, sl, #1
 80047ea:	9304      	str	r3, [sp, #16]
 80047ec:	9307      	str	r3, [sp, #28]
 80047ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047f2:	931a      	str	r3, [sp, #104]	; 0x68
 80047f4:	4654      	mov	r4, sl
 80047f6:	2205      	movs	r2, #5
 80047f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fc:	4851      	ldr	r0, [pc, #324]	; (8004944 <_svfiprintf_r+0x1ec>)
 80047fe:	f000 fa41 	bl	8004c84 <memchr>
 8004802:	9a04      	ldr	r2, [sp, #16]
 8004804:	b9d8      	cbnz	r0, 800483e <_svfiprintf_r+0xe6>
 8004806:	06d0      	lsls	r0, r2, #27
 8004808:	bf44      	itt	mi
 800480a:	2320      	movmi	r3, #32
 800480c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004810:	0711      	lsls	r1, r2, #28
 8004812:	bf44      	itt	mi
 8004814:	232b      	movmi	r3, #43	; 0x2b
 8004816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800481a:	f89a 3000 	ldrb.w	r3, [sl]
 800481e:	2b2a      	cmp	r3, #42	; 0x2a
 8004820:	d015      	beq.n	800484e <_svfiprintf_r+0xf6>
 8004822:	4654      	mov	r4, sl
 8004824:	2000      	movs	r0, #0
 8004826:	f04f 0c0a 	mov.w	ip, #10
 800482a:	9a07      	ldr	r2, [sp, #28]
 800482c:	4621      	mov	r1, r4
 800482e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004832:	3b30      	subs	r3, #48	; 0x30
 8004834:	2b09      	cmp	r3, #9
 8004836:	d94e      	bls.n	80048d6 <_svfiprintf_r+0x17e>
 8004838:	b1b0      	cbz	r0, 8004868 <_svfiprintf_r+0x110>
 800483a:	9207      	str	r2, [sp, #28]
 800483c:	e014      	b.n	8004868 <_svfiprintf_r+0x110>
 800483e:	eba0 0308 	sub.w	r3, r0, r8
 8004842:	fa09 f303 	lsl.w	r3, r9, r3
 8004846:	4313      	orrs	r3, r2
 8004848:	46a2      	mov	sl, r4
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	e7d2      	b.n	80047f4 <_svfiprintf_r+0x9c>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	9103      	str	r1, [sp, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	bfbb      	ittet	lt
 800485a:	425b      	neglt	r3, r3
 800485c:	f042 0202 	orrlt.w	r2, r2, #2
 8004860:	9307      	strge	r3, [sp, #28]
 8004862:	9307      	strlt	r3, [sp, #28]
 8004864:	bfb8      	it	lt
 8004866:	9204      	strlt	r2, [sp, #16]
 8004868:	7823      	ldrb	r3, [r4, #0]
 800486a:	2b2e      	cmp	r3, #46	; 0x2e
 800486c:	d10c      	bne.n	8004888 <_svfiprintf_r+0x130>
 800486e:	7863      	ldrb	r3, [r4, #1]
 8004870:	2b2a      	cmp	r3, #42	; 0x2a
 8004872:	d135      	bne.n	80048e0 <_svfiprintf_r+0x188>
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	3402      	adds	r4, #2
 8004878:	1d1a      	adds	r2, r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	9203      	str	r2, [sp, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfb8      	it	lt
 8004882:	f04f 33ff 	movlt.w	r3, #4294967295
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004948 <_svfiprintf_r+0x1f0>
 800488c:	2203      	movs	r2, #3
 800488e:	4650      	mov	r0, sl
 8004890:	7821      	ldrb	r1, [r4, #0]
 8004892:	f000 f9f7 	bl	8004c84 <memchr>
 8004896:	b140      	cbz	r0, 80048aa <_svfiprintf_r+0x152>
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	eba0 000a 	sub.w	r0, r0, sl
 800489e:	fa03 f000 	lsl.w	r0, r3, r0
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	3401      	adds	r4, #1
 80048a6:	4303      	orrs	r3, r0
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ae:	2206      	movs	r2, #6
 80048b0:	4826      	ldr	r0, [pc, #152]	; (800494c <_svfiprintf_r+0x1f4>)
 80048b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048b6:	f000 f9e5 	bl	8004c84 <memchr>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d038      	beq.n	8004930 <_svfiprintf_r+0x1d8>
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <_svfiprintf_r+0x1f8>)
 80048c0:	bb1b      	cbnz	r3, 800490a <_svfiprintf_r+0x1b2>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	3307      	adds	r3, #7
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	3308      	adds	r3, #8
 80048cc:	9303      	str	r3, [sp, #12]
 80048ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d0:	4433      	add	r3, r6
 80048d2:	9309      	str	r3, [sp, #36]	; 0x24
 80048d4:	e767      	b.n	80047a6 <_svfiprintf_r+0x4e>
 80048d6:	460c      	mov	r4, r1
 80048d8:	2001      	movs	r0, #1
 80048da:	fb0c 3202 	mla	r2, ip, r2, r3
 80048de:	e7a5      	b.n	800482c <_svfiprintf_r+0xd4>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f04f 0c0a 	mov.w	ip, #10
 80048e6:	4619      	mov	r1, r3
 80048e8:	3401      	adds	r4, #1
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	4620      	mov	r0, r4
 80048ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f2:	3a30      	subs	r2, #48	; 0x30
 80048f4:	2a09      	cmp	r2, #9
 80048f6:	d903      	bls.n	8004900 <_svfiprintf_r+0x1a8>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0c5      	beq.n	8004888 <_svfiprintf_r+0x130>
 80048fc:	9105      	str	r1, [sp, #20]
 80048fe:	e7c3      	b.n	8004888 <_svfiprintf_r+0x130>
 8004900:	4604      	mov	r4, r0
 8004902:	2301      	movs	r3, #1
 8004904:	fb0c 2101 	mla	r1, ip, r1, r2
 8004908:	e7f0      	b.n	80048ec <_svfiprintf_r+0x194>
 800490a:	ab03      	add	r3, sp, #12
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	462a      	mov	r2, r5
 8004910:	4638      	mov	r0, r7
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <_svfiprintf_r+0x1fc>)
 8004914:	a904      	add	r1, sp, #16
 8004916:	f3af 8000 	nop.w
 800491a:	1c42      	adds	r2, r0, #1
 800491c:	4606      	mov	r6, r0
 800491e:	d1d6      	bne.n	80048ce <_svfiprintf_r+0x176>
 8004920:	89ab      	ldrh	r3, [r5, #12]
 8004922:	065b      	lsls	r3, r3, #25
 8004924:	f53f af2c 	bmi.w	8004780 <_svfiprintf_r+0x28>
 8004928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800492a:	b01d      	add	sp, #116	; 0x74
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	ab03      	add	r3, sp, #12
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	462a      	mov	r2, r5
 8004936:	4638      	mov	r0, r7
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <_svfiprintf_r+0x1fc>)
 800493a:	a904      	add	r1, sp, #16
 800493c:	f000 f87c 	bl	8004a38 <_printf_i>
 8004940:	e7eb      	b.n	800491a <_svfiprintf_r+0x1c2>
 8004942:	bf00      	nop
 8004944:	08005058 	.word	0x08005058
 8004948:	0800505e 	.word	0x0800505e
 800494c:	08005062 	.word	0x08005062
 8004950:	00000000 	.word	0x00000000
 8004954:	080046a1 	.word	0x080046a1

08004958 <_printf_common>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	4616      	mov	r6, r2
 800495e:	4699      	mov	r9, r3
 8004960:	688a      	ldr	r2, [r1, #8]
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	4607      	mov	r7, r0
 8004966:	4293      	cmp	r3, r2
 8004968:	bfb8      	it	lt
 800496a:	4613      	movlt	r3, r2
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004972:	460c      	mov	r4, r1
 8004974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004978:	b10a      	cbz	r2, 800497e <_printf_common+0x26>
 800497a:	3301      	adds	r3, #1
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	0699      	lsls	r1, r3, #26
 8004982:	bf42      	ittt	mi
 8004984:	6833      	ldrmi	r3, [r6, #0]
 8004986:	3302      	addmi	r3, #2
 8004988:	6033      	strmi	r3, [r6, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	f015 0506 	ands.w	r5, r5, #6
 8004990:	d106      	bne.n	80049a0 <_printf_common+0x48>
 8004992:	f104 0a19 	add.w	sl, r4, #25
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	6832      	ldr	r2, [r6, #0]
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc28      	bgt.n	80049f2 <_printf_common+0x9a>
 80049a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049a4:	1e13      	subs	r3, r2, #0
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	bf18      	it	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	0692      	lsls	r2, r2, #26
 80049ae:	d42d      	bmi.n	8004a0c <_printf_common+0xb4>
 80049b0:	4649      	mov	r1, r9
 80049b2:	4638      	mov	r0, r7
 80049b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049b8:	47c0      	blx	r8
 80049ba:	3001      	adds	r0, #1
 80049bc:	d020      	beq.n	8004a00 <_printf_common+0xa8>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	68e5      	ldr	r5, [r4, #12]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf18      	it	ne
 80049ca:	2500      	movne	r5, #0
 80049cc:	6832      	ldr	r2, [r6, #0]
 80049ce:	f04f 0600 	mov.w	r6, #0
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	bf08      	it	eq
 80049d6:	1aad      	subeq	r5, r5, r2
 80049d8:	6922      	ldr	r2, [r4, #16]
 80049da:	bf08      	it	eq
 80049dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bfc4      	itt	gt
 80049e4:	1a9b      	subgt	r3, r3, r2
 80049e6:	18ed      	addgt	r5, r5, r3
 80049e8:	341a      	adds	r4, #26
 80049ea:	42b5      	cmp	r5, r6
 80049ec:	d11a      	bne.n	8004a24 <_printf_common+0xcc>
 80049ee:	2000      	movs	r0, #0
 80049f0:	e008      	b.n	8004a04 <_printf_common+0xac>
 80049f2:	2301      	movs	r3, #1
 80049f4:	4652      	mov	r2, sl
 80049f6:	4649      	mov	r1, r9
 80049f8:	4638      	mov	r0, r7
 80049fa:	47c0      	blx	r8
 80049fc:	3001      	adds	r0, #1
 80049fe:	d103      	bne.n	8004a08 <_printf_common+0xb0>
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a08:	3501      	adds	r5, #1
 8004a0a:	e7c4      	b.n	8004996 <_printf_common+0x3e>
 8004a0c:	2030      	movs	r0, #48	; 0x30
 8004a0e:	18e1      	adds	r1, r4, r3
 8004a10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a1a:	4422      	add	r2, r4
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a22:	e7c5      	b.n	80049b0 <_printf_common+0x58>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4622      	mov	r2, r4
 8004a28:	4649      	mov	r1, r9
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	47c0      	blx	r8
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d0e6      	beq.n	8004a00 <_printf_common+0xa8>
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7d9      	b.n	80049ea <_printf_common+0x92>
	...

08004a38 <_printf_i>:
 8004a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	7e0f      	ldrb	r7, [r1, #24]
 8004a3e:	4691      	mov	r9, r2
 8004a40:	2f78      	cmp	r7, #120	; 0x78
 8004a42:	4680      	mov	r8, r0
 8004a44:	460c      	mov	r4, r1
 8004a46:	469a      	mov	sl, r3
 8004a48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a4e:	d807      	bhi.n	8004a60 <_printf_i+0x28>
 8004a50:	2f62      	cmp	r7, #98	; 0x62
 8004a52:	d80a      	bhi.n	8004a6a <_printf_i+0x32>
 8004a54:	2f00      	cmp	r7, #0
 8004a56:	f000 80d9 	beq.w	8004c0c <_printf_i+0x1d4>
 8004a5a:	2f58      	cmp	r7, #88	; 0x58
 8004a5c:	f000 80a4 	beq.w	8004ba8 <_printf_i+0x170>
 8004a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a68:	e03a      	b.n	8004ae0 <_printf_i+0xa8>
 8004a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a6e:	2b15      	cmp	r3, #21
 8004a70:	d8f6      	bhi.n	8004a60 <_printf_i+0x28>
 8004a72:	a101      	add	r1, pc, #4	; (adr r1, 8004a78 <_printf_i+0x40>)
 8004a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a78:	08004ad1 	.word	0x08004ad1
 8004a7c:	08004ae5 	.word	0x08004ae5
 8004a80:	08004a61 	.word	0x08004a61
 8004a84:	08004a61 	.word	0x08004a61
 8004a88:	08004a61 	.word	0x08004a61
 8004a8c:	08004a61 	.word	0x08004a61
 8004a90:	08004ae5 	.word	0x08004ae5
 8004a94:	08004a61 	.word	0x08004a61
 8004a98:	08004a61 	.word	0x08004a61
 8004a9c:	08004a61 	.word	0x08004a61
 8004aa0:	08004a61 	.word	0x08004a61
 8004aa4:	08004bf3 	.word	0x08004bf3
 8004aa8:	08004b15 	.word	0x08004b15
 8004aac:	08004bd5 	.word	0x08004bd5
 8004ab0:	08004a61 	.word	0x08004a61
 8004ab4:	08004a61 	.word	0x08004a61
 8004ab8:	08004c15 	.word	0x08004c15
 8004abc:	08004a61 	.word	0x08004a61
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004a61 	.word	0x08004a61
 8004ac8:	08004a61 	.word	0x08004a61
 8004acc:	08004bdd 	.word	0x08004bdd
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	602a      	str	r2, [r5, #0]
 8004ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0a4      	b.n	8004c2e <_printf_i+0x1f6>
 8004ae4:	6820      	ldr	r0, [r4, #0]
 8004ae6:	6829      	ldr	r1, [r5, #0]
 8004ae8:	0606      	lsls	r6, r0, #24
 8004aea:	f101 0304 	add.w	r3, r1, #4
 8004aee:	d50a      	bpl.n	8004b06 <_printf_i+0xce>
 8004af0:	680e      	ldr	r6, [r1, #0]
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	2e00      	cmp	r6, #0
 8004af6:	da03      	bge.n	8004b00 <_printf_i+0xc8>
 8004af8:	232d      	movs	r3, #45	; 0x2d
 8004afa:	4276      	negs	r6, r6
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b00:	230a      	movs	r3, #10
 8004b02:	485e      	ldr	r0, [pc, #376]	; (8004c7c <_printf_i+0x244>)
 8004b04:	e019      	b.n	8004b3a <_printf_i+0x102>
 8004b06:	680e      	ldr	r6, [r1, #0]
 8004b08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b0c:	602b      	str	r3, [r5, #0]
 8004b0e:	bf18      	it	ne
 8004b10:	b236      	sxthne	r6, r6
 8004b12:	e7ef      	b.n	8004af4 <_printf_i+0xbc>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	1d19      	adds	r1, r3, #4
 8004b1a:	6029      	str	r1, [r5, #0]
 8004b1c:	0601      	lsls	r1, r0, #24
 8004b1e:	d501      	bpl.n	8004b24 <_printf_i+0xec>
 8004b20:	681e      	ldr	r6, [r3, #0]
 8004b22:	e002      	b.n	8004b2a <_printf_i+0xf2>
 8004b24:	0646      	lsls	r6, r0, #25
 8004b26:	d5fb      	bpl.n	8004b20 <_printf_i+0xe8>
 8004b28:	881e      	ldrh	r6, [r3, #0]
 8004b2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2308      	moveq	r3, #8
 8004b30:	230a      	movne	r3, #10
 8004b32:	4852      	ldr	r0, [pc, #328]	; (8004c7c <_printf_i+0x244>)
 8004b34:	2100      	movs	r1, #0
 8004b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b3a:	6865      	ldr	r5, [r4, #4]
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	bfa8      	it	ge
 8004b40:	6821      	ldrge	r1, [r4, #0]
 8004b42:	60a5      	str	r5, [r4, #8]
 8004b44:	bfa4      	itt	ge
 8004b46:	f021 0104 	bicge.w	r1, r1, #4
 8004b4a:	6021      	strge	r1, [r4, #0]
 8004b4c:	b90e      	cbnz	r6, 8004b52 <_printf_i+0x11a>
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	d04d      	beq.n	8004bee <_printf_i+0x1b6>
 8004b52:	4615      	mov	r5, r2
 8004b54:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b58:	fb03 6711 	mls	r7, r3, r1, r6
 8004b5c:	5dc7      	ldrb	r7, [r0, r7]
 8004b5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b62:	4637      	mov	r7, r6
 8004b64:	42bb      	cmp	r3, r7
 8004b66:	460e      	mov	r6, r1
 8004b68:	d9f4      	bls.n	8004b54 <_printf_i+0x11c>
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d10b      	bne.n	8004b86 <_printf_i+0x14e>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	07de      	lsls	r6, r3, #31
 8004b72:	d508      	bpl.n	8004b86 <_printf_i+0x14e>
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	6861      	ldr	r1, [r4, #4]
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	bfde      	ittt	le
 8004b7c:	2330      	movle	r3, #48	; 0x30
 8004b7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b86:	1b52      	subs	r2, r2, r5
 8004b88:	6122      	str	r2, [r4, #16]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4640      	mov	r0, r8
 8004b90:	f8cd a000 	str.w	sl, [sp]
 8004b94:	aa03      	add	r2, sp, #12
 8004b96:	f7ff fedf 	bl	8004958 <_printf_common>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d14c      	bne.n	8004c38 <_printf_i+0x200>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba2:	b004      	add	sp, #16
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	4834      	ldr	r0, [pc, #208]	; (8004c7c <_printf_i+0x244>)
 8004baa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bae:	6829      	ldr	r1, [r5, #0]
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bb6:	6029      	str	r1, [r5, #0]
 8004bb8:	061d      	lsls	r5, r3, #24
 8004bba:	d514      	bpl.n	8004be6 <_printf_i+0x1ae>
 8004bbc:	07df      	lsls	r7, r3, #31
 8004bbe:	bf44      	itt	mi
 8004bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc4:	6023      	strmi	r3, [r4, #0]
 8004bc6:	b91e      	cbnz	r6, 8004bd0 <_printf_i+0x198>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	f023 0320 	bic.w	r3, r3, #32
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	e7af      	b.n	8004b34 <_printf_i+0xfc>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	f043 0320 	orr.w	r3, r3, #32
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	2378      	movs	r3, #120	; 0x78
 8004bde:	4828      	ldr	r0, [pc, #160]	; (8004c80 <_printf_i+0x248>)
 8004be0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004be4:	e7e3      	b.n	8004bae <_printf_i+0x176>
 8004be6:	0659      	lsls	r1, r3, #25
 8004be8:	bf48      	it	mi
 8004bea:	b2b6      	uxthmi	r6, r6
 8004bec:	e7e6      	b.n	8004bbc <_printf_i+0x184>
 8004bee:	4615      	mov	r5, r2
 8004bf0:	e7bb      	b.n	8004b6a <_printf_i+0x132>
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	6826      	ldr	r6, [r4, #0]
 8004bf6:	1d18      	adds	r0, r3, #4
 8004bf8:	6961      	ldr	r1, [r4, #20]
 8004bfa:	6028      	str	r0, [r5, #0]
 8004bfc:	0635      	lsls	r5, r6, #24
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	d501      	bpl.n	8004c06 <_printf_i+0x1ce>
 8004c02:	6019      	str	r1, [r3, #0]
 8004c04:	e002      	b.n	8004c0c <_printf_i+0x1d4>
 8004c06:	0670      	lsls	r0, r6, #25
 8004c08:	d5fb      	bpl.n	8004c02 <_printf_i+0x1ca>
 8004c0a:	8019      	strh	r1, [r3, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4615      	mov	r5, r2
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	e7ba      	b.n	8004b8a <_printf_i+0x152>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	2100      	movs	r1, #0
 8004c18:	1d1a      	adds	r2, r3, #4
 8004c1a:	602a      	str	r2, [r5, #0]
 8004c1c:	681d      	ldr	r5, [r3, #0]
 8004c1e:	6862      	ldr	r2, [r4, #4]
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 f82f 	bl	8004c84 <memchr>
 8004c26:	b108      	cbz	r0, 8004c2c <_printf_i+0x1f4>
 8004c28:	1b40      	subs	r0, r0, r5
 8004c2a:	6060      	str	r0, [r4, #4]
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	2300      	movs	r3, #0
 8004c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c36:	e7a8      	b.n	8004b8a <_printf_i+0x152>
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	6923      	ldr	r3, [r4, #16]
 8004c40:	47d0      	blx	sl
 8004c42:	3001      	adds	r0, #1
 8004c44:	d0ab      	beq.n	8004b9e <_printf_i+0x166>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	079b      	lsls	r3, r3, #30
 8004c4a:	d413      	bmi.n	8004c74 <_printf_i+0x23c>
 8004c4c:	68e0      	ldr	r0, [r4, #12]
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	4298      	cmp	r0, r3
 8004c52:	bfb8      	it	lt
 8004c54:	4618      	movlt	r0, r3
 8004c56:	e7a4      	b.n	8004ba2 <_printf_i+0x16a>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	4640      	mov	r0, r8
 8004c60:	47d0      	blx	sl
 8004c62:	3001      	adds	r0, #1
 8004c64:	d09b      	beq.n	8004b9e <_printf_i+0x166>
 8004c66:	3501      	adds	r5, #1
 8004c68:	68e3      	ldr	r3, [r4, #12]
 8004c6a:	9903      	ldr	r1, [sp, #12]
 8004c6c:	1a5b      	subs	r3, r3, r1
 8004c6e:	42ab      	cmp	r3, r5
 8004c70:	dcf2      	bgt.n	8004c58 <_printf_i+0x220>
 8004c72:	e7eb      	b.n	8004c4c <_printf_i+0x214>
 8004c74:	2500      	movs	r5, #0
 8004c76:	f104 0619 	add.w	r6, r4, #25
 8004c7a:	e7f5      	b.n	8004c68 <_printf_i+0x230>
 8004c7c:	08005069 	.word	0x08005069
 8004c80:	0800507a 	.word	0x0800507a

08004c84 <memchr>:
 8004c84:	4603      	mov	r3, r0
 8004c86:	b510      	push	{r4, lr}
 8004c88:	b2c9      	uxtb	r1, r1
 8004c8a:	4402      	add	r2, r0
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	d101      	bne.n	8004c96 <memchr+0x12>
 8004c92:	2000      	movs	r0, #0
 8004c94:	e003      	b.n	8004c9e <memchr+0x1a>
 8004c96:	7804      	ldrb	r4, [r0, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	428c      	cmp	r4, r1
 8004c9c:	d1f6      	bne.n	8004c8c <memchr+0x8>
 8004c9e:	bd10      	pop	{r4, pc}

08004ca0 <memcpy>:
 8004ca0:	440a      	add	r2, r1
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca8:	d100      	bne.n	8004cac <memcpy+0xc>
 8004caa:	4770      	bx	lr
 8004cac:	b510      	push	{r4, lr}
 8004cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb8:	d1f9      	bne.n	8004cae <memcpy+0xe>
 8004cba:	bd10      	pop	{r4, pc}

08004cbc <memmove>:
 8004cbc:	4288      	cmp	r0, r1
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	eb01 0402 	add.w	r4, r1, r2
 8004cc4:	d902      	bls.n	8004ccc <memmove+0x10>
 8004cc6:	4284      	cmp	r4, r0
 8004cc8:	4623      	mov	r3, r4
 8004cca:	d807      	bhi.n	8004cdc <memmove+0x20>
 8004ccc:	1e43      	subs	r3, r0, #1
 8004cce:	42a1      	cmp	r1, r4
 8004cd0:	d008      	beq.n	8004ce4 <memmove+0x28>
 8004cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cda:	e7f8      	b.n	8004cce <memmove+0x12>
 8004cdc:	4601      	mov	r1, r0
 8004cde:	4402      	add	r2, r0
 8004ce0:	428a      	cmp	r2, r1
 8004ce2:	d100      	bne.n	8004ce6 <memmove+0x2a>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cee:	e7f7      	b.n	8004ce0 <memmove+0x24>

08004cf0 <_free_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d040      	beq.n	8004d7a <_free_r+0x8a>
 8004cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfc:	1f0c      	subs	r4, r1, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfb8      	it	lt
 8004d02:	18e4      	addlt	r4, r4, r3
 8004d04:	f000 f910 	bl	8004f28 <__malloc_lock>
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <_free_r+0x8c>)
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	b933      	cbnz	r3, 8004d1c <_free_r+0x2c>
 8004d0e:	6063      	str	r3, [r4, #4]
 8004d10:	6014      	str	r4, [r2, #0]
 8004d12:	4628      	mov	r0, r5
 8004d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d18:	f000 b90c 	b.w	8004f34 <__malloc_unlock>
 8004d1c:	42a3      	cmp	r3, r4
 8004d1e:	d908      	bls.n	8004d32 <_free_r+0x42>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	1821      	adds	r1, r4, r0
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf01      	itttt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	1809      	addeq	r1, r1, r0
 8004d2e:	6021      	streq	r1, [r4, #0]
 8004d30:	e7ed      	b.n	8004d0e <_free_r+0x1e>
 8004d32:	461a      	mov	r2, r3
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	b10b      	cbz	r3, 8004d3c <_free_r+0x4c>
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	d9fa      	bls.n	8004d32 <_free_r+0x42>
 8004d3c:	6811      	ldr	r1, [r2, #0]
 8004d3e:	1850      	adds	r0, r2, r1
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d10b      	bne.n	8004d5c <_free_r+0x6c>
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	4401      	add	r1, r0
 8004d48:	1850      	adds	r0, r2, r1
 8004d4a:	4283      	cmp	r3, r0
 8004d4c:	6011      	str	r1, [r2, #0]
 8004d4e:	d1e0      	bne.n	8004d12 <_free_r+0x22>
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4401      	add	r1, r0
 8004d56:	6011      	str	r1, [r2, #0]
 8004d58:	6053      	str	r3, [r2, #4]
 8004d5a:	e7da      	b.n	8004d12 <_free_r+0x22>
 8004d5c:	d902      	bls.n	8004d64 <_free_r+0x74>
 8004d5e:	230c      	movs	r3, #12
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	e7d6      	b.n	8004d12 <_free_r+0x22>
 8004d64:	6820      	ldr	r0, [r4, #0]
 8004d66:	1821      	adds	r1, r4, r0
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	bf01      	itttt	eq
 8004d6c:	6819      	ldreq	r1, [r3, #0]
 8004d6e:	685b      	ldreq	r3, [r3, #4]
 8004d70:	1809      	addeq	r1, r1, r0
 8004d72:	6021      	streq	r1, [r4, #0]
 8004d74:	6063      	str	r3, [r4, #4]
 8004d76:	6054      	str	r4, [r2, #4]
 8004d78:	e7cb      	b.n	8004d12 <_free_r+0x22>
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	20000208 	.word	0x20000208

08004d80 <sbrk_aligned>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4e0e      	ldr	r6, [pc, #56]	; (8004dbc <sbrk_aligned+0x3c>)
 8004d84:	460c      	mov	r4, r1
 8004d86:	6831      	ldr	r1, [r6, #0]
 8004d88:	4605      	mov	r5, r0
 8004d8a:	b911      	cbnz	r1, 8004d92 <sbrk_aligned+0x12>
 8004d8c:	f000 f8bc 	bl	8004f08 <_sbrk_r>
 8004d90:	6030      	str	r0, [r6, #0]
 8004d92:	4621      	mov	r1, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f8b7 	bl	8004f08 <_sbrk_r>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	d00a      	beq.n	8004db4 <sbrk_aligned+0x34>
 8004d9e:	1cc4      	adds	r4, r0, #3
 8004da0:	f024 0403 	bic.w	r4, r4, #3
 8004da4:	42a0      	cmp	r0, r4
 8004da6:	d007      	beq.n	8004db8 <sbrk_aligned+0x38>
 8004da8:	1a21      	subs	r1, r4, r0
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f8ac 	bl	8004f08 <_sbrk_r>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d101      	bne.n	8004db8 <sbrk_aligned+0x38>
 8004db4:	f04f 34ff 	mov.w	r4, #4294967295
 8004db8:	4620      	mov	r0, r4
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	2000020c 	.word	0x2000020c

08004dc0 <_malloc_r>:
 8004dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc4:	1ccd      	adds	r5, r1, #3
 8004dc6:	f025 0503 	bic.w	r5, r5, #3
 8004dca:	3508      	adds	r5, #8
 8004dcc:	2d0c      	cmp	r5, #12
 8004dce:	bf38      	it	cc
 8004dd0:	250c      	movcc	r5, #12
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	db01      	blt.n	8004ddc <_malloc_r+0x1c>
 8004dd8:	42a9      	cmp	r1, r5
 8004dda:	d905      	bls.n	8004de8 <_malloc_r+0x28>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	2600      	movs	r6, #0
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4630      	mov	r0, r6
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de8:	4e2e      	ldr	r6, [pc, #184]	; (8004ea4 <_malloc_r+0xe4>)
 8004dea:	f000 f89d 	bl	8004f28 <__malloc_lock>
 8004dee:	6833      	ldr	r3, [r6, #0]
 8004df0:	461c      	mov	r4, r3
 8004df2:	bb34      	cbnz	r4, 8004e42 <_malloc_r+0x82>
 8004df4:	4629      	mov	r1, r5
 8004df6:	4638      	mov	r0, r7
 8004df8:	f7ff ffc2 	bl	8004d80 <sbrk_aligned>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	4604      	mov	r4, r0
 8004e00:	d14d      	bne.n	8004e9e <_malloc_r+0xde>
 8004e02:	6834      	ldr	r4, [r6, #0]
 8004e04:	4626      	mov	r6, r4
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d140      	bne.n	8004e8c <_malloc_r+0xcc>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4638      	mov	r0, r7
 8004e10:	eb04 0803 	add.w	r8, r4, r3
 8004e14:	f000 f878 	bl	8004f08 <_sbrk_r>
 8004e18:	4580      	cmp	r8, r0
 8004e1a:	d13a      	bne.n	8004e92 <_malloc_r+0xd2>
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	3503      	adds	r5, #3
 8004e20:	1a6d      	subs	r5, r5, r1
 8004e22:	f025 0503 	bic.w	r5, r5, #3
 8004e26:	3508      	adds	r5, #8
 8004e28:	2d0c      	cmp	r5, #12
 8004e2a:	bf38      	it	cc
 8004e2c:	250c      	movcc	r5, #12
 8004e2e:	4638      	mov	r0, r7
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7ff ffa5 	bl	8004d80 <sbrk_aligned>
 8004e36:	3001      	adds	r0, #1
 8004e38:	d02b      	beq.n	8004e92 <_malloc_r+0xd2>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	442b      	add	r3, r5
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	e00e      	b.n	8004e60 <_malloc_r+0xa0>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	1b52      	subs	r2, r2, r5
 8004e46:	d41e      	bmi.n	8004e86 <_malloc_r+0xc6>
 8004e48:	2a0b      	cmp	r2, #11
 8004e4a:	d916      	bls.n	8004e7a <_malloc_r+0xba>
 8004e4c:	1961      	adds	r1, r4, r5
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	6025      	str	r5, [r4, #0]
 8004e52:	bf18      	it	ne
 8004e54:	6059      	strne	r1, [r3, #4]
 8004e56:	6863      	ldr	r3, [r4, #4]
 8004e58:	bf08      	it	eq
 8004e5a:	6031      	streq	r1, [r6, #0]
 8004e5c:	5162      	str	r2, [r4, r5]
 8004e5e:	604b      	str	r3, [r1, #4]
 8004e60:	4638      	mov	r0, r7
 8004e62:	f104 060b 	add.w	r6, r4, #11
 8004e66:	f000 f865 	bl	8004f34 <__malloc_unlock>
 8004e6a:	f026 0607 	bic.w	r6, r6, #7
 8004e6e:	1d23      	adds	r3, r4, #4
 8004e70:	1af2      	subs	r2, r6, r3
 8004e72:	d0b6      	beq.n	8004de2 <_malloc_r+0x22>
 8004e74:	1b9b      	subs	r3, r3, r6
 8004e76:	50a3      	str	r3, [r4, r2]
 8004e78:	e7b3      	b.n	8004de2 <_malloc_r+0x22>
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	bf0c      	ite	eq
 8004e80:	6032      	streq	r2, [r6, #0]
 8004e82:	605a      	strne	r2, [r3, #4]
 8004e84:	e7ec      	b.n	8004e60 <_malloc_r+0xa0>
 8004e86:	4623      	mov	r3, r4
 8004e88:	6864      	ldr	r4, [r4, #4]
 8004e8a:	e7b2      	b.n	8004df2 <_malloc_r+0x32>
 8004e8c:	4634      	mov	r4, r6
 8004e8e:	6876      	ldr	r6, [r6, #4]
 8004e90:	e7b9      	b.n	8004e06 <_malloc_r+0x46>
 8004e92:	230c      	movs	r3, #12
 8004e94:	4638      	mov	r0, r7
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	f000 f84c 	bl	8004f34 <__malloc_unlock>
 8004e9c:	e7a1      	b.n	8004de2 <_malloc_r+0x22>
 8004e9e:	6025      	str	r5, [r4, #0]
 8004ea0:	e7de      	b.n	8004e60 <_malloc_r+0xa0>
 8004ea2:	bf00      	nop
 8004ea4:	20000208 	.word	0x20000208

08004ea8 <_realloc_r>:
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	4680      	mov	r8, r0
 8004eae:	4614      	mov	r4, r2
 8004eb0:	460e      	mov	r6, r1
 8004eb2:	b921      	cbnz	r1, 8004ebe <_realloc_r+0x16>
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eba:	f7ff bf81 	b.w	8004dc0 <_malloc_r>
 8004ebe:	b92a      	cbnz	r2, 8004ecc <_realloc_r+0x24>
 8004ec0:	f7ff ff16 	bl	8004cf0 <_free_r>
 8004ec4:	4625      	mov	r5, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ecc:	f000 f838 	bl	8004f40 <_malloc_usable_size_r>
 8004ed0:	4284      	cmp	r4, r0
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	d802      	bhi.n	8004edc <_realloc_r+0x34>
 8004ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eda:	d812      	bhi.n	8004f02 <_realloc_r+0x5a>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4640      	mov	r0, r8
 8004ee0:	f7ff ff6e 	bl	8004dc0 <_malloc_r>
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0ed      	beq.n	8004ec6 <_realloc_r+0x1e>
 8004eea:	42bc      	cmp	r4, r7
 8004eec:	4622      	mov	r2, r4
 8004eee:	4631      	mov	r1, r6
 8004ef0:	bf28      	it	cs
 8004ef2:	463a      	movcs	r2, r7
 8004ef4:	f7ff fed4 	bl	8004ca0 <memcpy>
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fef8 	bl	8004cf0 <_free_r>
 8004f00:	e7e1      	b.n	8004ec6 <_realloc_r+0x1e>
 8004f02:	4635      	mov	r5, r6
 8004f04:	e7df      	b.n	8004ec6 <_realloc_r+0x1e>
	...

08004f08 <_sbrk_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4d05      	ldr	r5, [pc, #20]	; (8004f24 <_sbrk_r+0x1c>)
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	f7fd f944 	bl	80021a0 <_sbrk>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_sbrk_r+0x1a>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_sbrk_r+0x1a>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20000210 	.word	0x20000210

08004f28 <__malloc_lock>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__malloc_lock+0x8>)
 8004f2a:	f000 b811 	b.w	8004f50 <__retarget_lock_acquire_recursive>
 8004f2e:	bf00      	nop
 8004f30:	20000214 	.word	0x20000214

08004f34 <__malloc_unlock>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__malloc_unlock+0x8>)
 8004f36:	f000 b80c 	b.w	8004f52 <__retarget_lock_release_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	20000214 	.word	0x20000214

08004f40 <_malloc_usable_size_r>:
 8004f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f44:	1f18      	subs	r0, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfbc      	itt	lt
 8004f4a:	580b      	ldrlt	r3, [r1, r0]
 8004f4c:	18c0      	addlt	r0, r0, r3
 8004f4e:	4770      	bx	lr

08004f50 <__retarget_lock_acquire_recursive>:
 8004f50:	4770      	bx	lr

08004f52 <__retarget_lock_release_recursive>:
 8004f52:	4770      	bx	lr

08004f54 <_init>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr

08004f60 <_fini>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr
